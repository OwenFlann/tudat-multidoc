extended_summary: |
  Functions for performing numerical interpolation using various algorithms.


functions:

  - name: linear_interpolation # [py]
  #- name: linearInterpolation # [cpp]
    short_summary: "Function to create settings for linear interpolation."
    extended_summary: |
      Function to create settings for linear interpolation, where the interpolator
      defines a linear curve between each two subsequent intervals of the
      independent variable input data.

    parameters:
      - name: lookup_scheme = huntingAlgorithm # [py]
        type: AvailableLookupScheme # [py]
        description: Algorithm used to find the nearest neighbor in the independent
          variable input data when the interpolation scheme is called

      - name: boundary_interpolation = extrapolate_at_boundary_with_warning # [py]
        type: BoundaryInterpolationType =  # [py]
        description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
          of the independent variable input data

    returns:
        type: InterpolatorSettings # [py]
        description: Linear interpolation settings object

  functions:
    - name: piecewise_constant_interpolation # [py]
    #- name: linearInterpolation # [cpp]
      short_summary: "Function to create settings for piecewise constant interpolation."
      extended_summary: |
        Function to create settings for piecewise constant interpolation. If interpolator
        is to return the value at :math:`t`, and :math:`t_{i}\le t \< t_{i+1}`, the interpolator
        returns :math:`\mathbf{x}_{i}`

      parameters:
        - name: lookup_scheme = huntingAlgorithm # [py]
          type: AvailableLookupScheme # [py]
          description: Algorithm used to find the nearest neighbor in the independent
            variable input data when the interpolation scheme is called

        - name: boundary_interpolation = extrapolate_at_boundary_with_warning # [py]
          type: BoundaryInterpolationType =  # [py]
          description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
            of the independent variable input data

      returns:
          type: InterpolatorSettings # [py]
          description: Piecewise constant interpolation settings object

  - name: cubic_spline_interpolation # [py]
    short_summary: "Function to create settings for cubic spline interpolation."
    extended_summary: |
      Function to create settings for cubic spline interpolation, where the interpolator
      defines a cubic curve polynomial curve between each two subsequent intervals of the
      independent variable input data. The curve has continuous value, first derivative and
      second derivate between subsequent intervals. As boundary condition, the spline has
      a zero second derivative imposed at the upper and lower boundaries of the interpolation
      domain.

    parameters:
      - name: lookup_scheme = huntingAlgorithm # [py]
        type: AvailableLookupScheme # [py]
        description: Algorithm used to find the nearest neighbor in the independent
          variable input data when the interpolation scheme is called

      - name: boundary_interpolation = extrapolate_at_boundary_with_warning # [py]
        type: BoundaryInterpolationType =  # [py]
        description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
          of the independent variable input data

    returns:
        type: InterpolatorSettings # [py]
        description: Cubic spline settings object

  functions:
    - name: hermite_interpolation # [py]
    #- name: linearInterpolation # [cpp]
      short_summary: "Function to create settings for cubic Hermite spline interpolation."
      extended_summary: |
        Function to create settings for piecewise cubic Hermite spline interpolation. To use this
        interpolator, a key-value container of values, and a key-value container of first derivatives,
        must be provided to the function creating an interpolator (:func:`create_one_dimensional_scalar_interpolator`,
        :func:`create_one_dimensional_vector_interpolator`,  :func:`create_one_dimensional_matrix_interpolator`). The resulting
        spline uses the value and first derivatives (four piece of information for each interval) at two subsequent nodes to construct
        a cubic polynomial between each two subsequent nodes. The resulting spline has constant values and first derivatives

      parameters:
        - name: lookup_scheme = huntingAlgorithm # [py]
          type: AvailableLookupScheme # [py]
          description: Algorithm used to find the nearest neighbor in the independent
            variable input data when the interpolation scheme is called

        - name: boundary_interpolation = extrapolate_at_boundary_with_warning # [py]
          type: BoundaryInterpolationType =  # [py]
          description: Interpolator behaviour that is to be used beyond the upper and lower boundaries
            of the independent variable input data

      returns:
          type: InterpolatorSettings # [py]
          description: Hermite spline interpolation settings object

