extended_summary: |
  This module provides the functionality for creating thrust 
  magnitude and direction settings.

# the structure of this file follows the order of expose_acceleration_setup.cpp (tudatpy) and
# includes tudat content for:
# - thrustSettings.h

enums:


  #    py::enum_<tss::ThrustFrames>
  #        enum tudat::simulation_setup::ThrustFrames

  - name: ThrustFrames
    short_summary: "Enumeration of available thrust frame types."
    extended_summary: |
      Enumeration of thrust frame types supported by tudat. The inertial frame has axes along the global orientation (as
      defined in the :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies` object. The TNW is determined
      w.r.t. a central body as described in the function :func:`~tudatpy.astro.frame_conversion.tnw_to_inertial_rotation_matrix`
      (with the N-axis pointing away from the central body).

    members:
      - name: unspecified_thrust_frame # [cpp]
      - name: inertial_thrust_frame # [cpp]
      - name: tnw_thrust_frame # [cpp]

      - name: unspecified_thrust_frame_type # [py]
      - name: inertial_thrust_frame_type # [py]
      - name: tnw_thrust_frame_type # [py]


  #    py::enum_<tss::ThrustMagnitudeTypes>
  #        enum tudat::simulation_setup::ThrustMagnitudeTypes

  - name: ThrustMagnitudeTypes
    short_summary: "Enumeration of available thrust magnitude types."
#    extended_summary: |
#      Enumeration of thrust magnitude types supported by tudat.

    members:

      - name: constant_thrust_magnitude
      - name: from_engine_properties_thrust_magnitude
      - name: thrust_magnitude_from_time_function
      - name: thrust_magnitude_from_dependent_variables
      - name: bang_bang_thrust_magnitude_from_mee_costates


  ##    py::enum_<tss::ThrustDirectionTypes>
  ##        enum tudat::simulation_setup::ThrustDirectionTypes

  #- name: ThrustDirectionGuidanceTypes
    #short_summary: "Enumeration of available thrust direction types."
##    extended_summary: |
##      Enumeration of thrust direction types supported by tudat.

    #members:

      #- name: colinear_with_state_segment_thrust_direction_type
      #- name: thrust_direction_from_existing_body_orientation_type
      #- name: custom_thrust_direction_type
      #- name: custom_thrust_orientation_type
      #- name: mee_costate_based_thrust_direction_type




classes:

  ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################### Thrust settings ( thrustSettings.h / thrustSettings.cpp ) ########################################
  ## # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  ## Thrust direction: base
  #- name: ThrustDirectionSettings
    #short_summary: "Functional base class to define settings for the thrust direction."
##    extended_summary: |
##      Functional base class to provide settings for the thrust direction.

    #methods:
      #- name: ctor # [cpp]
        #short_summary: "Constructor." # [cpp]
        #extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]

    #attributes:
      #- name: thrustDirectionType_ # [cpp] # readonly
        #type: ThrustDirectionType # [cpp]
      #- name: thrust_direction_type # [py] # readonly
        #type: ThrustDirectionType # [py]
        #description: Thrust direction type object.

      #- name: relativeBody_ # [cpp] # readonly
        #type: std::string # [cpp]
      #- name: relative_body # [py] # readonly
        #type: str # [py]
        #description: Body to which the thrust acceleration is applied.


  ## Thrust direction: derived (1)
  #- name: ThrustDirectionFromStateGuidanceSettings
    #short_summary: "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from the current state."
    #extended_summary: |
      #Derived class to provide settings for the thrust direction. The thrust direction is assumed to be in line with
      #either the position or velocity of the body of interest with respect to some other
      #body.

    #methods:
      #- name: ctor # [cpp]
        #short_summary: "Constructor." # [cpp]
        #extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    #attributes:
      #- name: isColinearWithVelocity_ # [cpp] # readonly
        #type: bool # [cpp]
      #- name: is_colinear_with_velocity # [py] # readonly
        #type: bool # [py]
        #description: Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false).

      #- name: directionIsOppositeToVector_ # [cpp] # readonly
        #type: bool # [cpp]
      #- name: direction_is_opposite_to_vector # [py] # readonly
        #type: bool # [py]
        #description: Whether the thrust is pointing towards the thrusting body (true) or the central body (false).


  ## Thrust direction: derived (2)
  #- name: CustomThrustDirectionSettings
    #short_summary: "`ThrustDirectionSettings`-derived class to define settings for a custom thrust direction."
    #extended_summary: |
      #Derived class to provide settings for the thrust direction. The thrust direction is provided through a unit
      #vector in the inertial frame.

    #methods:
      #- name: ctor # [cpp]
        #short_summary: "Constructor." # [cpp]
        #extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    #attributes:
      #- name: thrustDirectionFunction_ # [cpp] # readonly
        #type: std::function<Eigen::Vector3d(double)> # [cpp]
      #- name: thrust_direction_function # [py] # readonly
        #type: callable[[float], numpy.ndarray] # [py]
        #description: Function of time returning the thrust direction in the inertial frame.


  ## Thrust direction: derived (3)
  #- name: CustomThrustOrientationSettings
    #short_summary: "`ThrustDirectionSettings`-derived class to define settings for a custom thrust orientation."
    #extended_summary: |
      #Derived class to provide settings for the thrust direction. The thrust orientation is provided through a function
      #of time returning a unit quaternion in the inertial frame, representing the rotation from body-fixed thrust
      #direction to the inertial thrust direction.

    #methods:
      #- name: ctor # [cpp]
        #short_summary: "Constructor." # [cpp]
        #extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    #attributes:
      #- name: thrustOrientationFunction_ # [cpp] # readonly
        #type: std::function<Eigen::Quaterniond(double)> # [cpp]
      #- name: thrust_orientation_function # [py] # readonly
        #type: callable[[float], numpy.ndarray] # [py]
        #description: Function of time returning the rotation between the thrust direction in the body-fixed frame to the inertial frame.


# # Thrust direction: derived (4)
# - name: MeeCostateBasedThrustDirectionSettings
#   short_summary: "`ThrustDirectionSettings`-derived class to define settings for the thrust direction from Modified Equinoctial Elements (MEE) costates."
#   extended_summary: |
#     Derived class to provide settings for the thrust direction. By using these settings for the thrust direction,
#     the so-called co-states of the Modified Equinoctial elements are used to determine the direction of the thrust.

#   methods:
#     - name: ctor # [cpp]
#       short_summary: "Constructor." # [cpp]
#       extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

#   attributes:
#     - name: vehicleName_ # [cpp] # readonly
#       type: std::string # [cpp]
#     - name: vehicle_name # [py] # readonly
#       type: str # [py]
#       description: Name of the body to which the thrust is applied.

#     - name: costateFunction_ # [cpp] # readonly
#       type: std::function<Eigen::VectorXd(double)> # [cpp]
#     - name: costate_function # [py] # readonly
#       type: callable[[float], numpy.ndarray] # [py]
#       description: Function of time returning the five costates.


  # Thrust magnitude: base
  - name: ThrustMagnitudeSettings
    short_summary: "Functional base class to define settings for the thrust magnitude."
#    extended_summary: |
#      Functional base class to provide settings for the thrust magnitude.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]

    attributes:
      - name: thrustMagnitudeType_ # [cpp] # readonly
        type: ThrustMagnitudeType # [cpp]
      - name: thrust_magnitude_type # [py] # readonly
        type: ThrustMagnitudeType # [py]
        description: Thrust magnitude type object.

      - name: thrustOriginId_ # [cpp] # readonly
        type: std::string # [cpp]
      - name: thrust_origin_id # [py] # readonly
        type: str # [py]
        description: Reference ID of the thrust origin that should be used (empty if N/A).


  # Thrust magnitude: derived (1)
  - name: ConstantThrustMagnitudeSettings
    short_summary: "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude."
    extended_summary: |
      Derived class to provide settings for the thrust magnitude. This class should be used to define a constant thrust
      magnitude.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]

    attributes:
      - name: thrustMagnitude_ # [cpp] # readonly
        type: double # [cpp]
      - name: thrust_magnitude # [py] # readonly
        type: float # [py]
        description: Value of the constant thrust magnitude.

      - name: specificImpulse_ # [cpp] # readonly
        type: double # [cpp]
      - name: specific_impulse # [py] # readonly
        type: float # [py]
        description: Value of the constant specific impulse.

      - name: bodyFixedThrustDirection_ # [cpp] # readonly
        type: Eigen::Vector3d # [cpp]
      - name: specific_impulse # [py] # readonly
        type: numpy.ndarray # [py]
        description: Thrust direction vector expressed in the body-fixed reference frame.


#  # Thrust magnitude: derived (2)
#  - name: FromBodyThrustMagnitudeSettings
#    short_summary: "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude."
#    extended_summary: |
#      Derived class to provide settings for the thrust magnitude.  This class creates thrust magnitude settings that use
#      the thrust from one or all of the EngineModel objects that a vehicle is endowed with. In such a situation,
#      the thrust direction, force, and specific impulse are taken from the EngineModel.
#
#    methods:
#      - name: ctor # [cpp]
#        short_summary: "Constructor." # [cpp]
#        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]
#
#    attributes:
#      - name: useAllEngines_ # [cpp] # readonly
#        type: bool # [cpp]
#      - name: use_all_engines # [py] # readonly
#        type: bool # [py]
#        description: It denotes whether all engines of the associated body are to be combined into a single thrust magnitude.


  # Thrust magnitude: derived (3)
  - name: CustomThrustMagnitudeSettings
    short_summary: "`ThrustMagnitudeSettings`-derived class to define settings for constant thrust magnitude."
    extended_summary: |
      Derived class to provide settings for the thrust magnitude. This class should be used to define a thrust
      magnitude through a custom function.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for thrust should be instantiated through factory functions of a derived class." # [cpp]



functions:

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Thrust model guidance ( createThrustModelGuidance.h / createThrustModelGuidance.cpp ) ############
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

# For now, it was decided that these functions should not be part of the user interface

#  # Free functions
#
#  # Combined thrust direction
#  - name: getCombinedThrustDirection # [cpp]
#  - name: get_combined_thrust_direction # [py]
#    short_summary: "Function to retrieve the effective thrust direction from a set of thrust sources."
#    extended_summary: |
#      Function to retrieve the effective thrust direction from a set of thrust sources (e.g., multiple nozzles).
#      It returns the vector sum of all thrust directions and the scalar sum of all thrust magnitudes. Both thrust
#      magnitude and direction are supplied as functions of time.
#
#    parameters:
#      - name: thrustDirections # [cpp]
#        type: std::vector<std::function<Eigen::Vector3d()>> # [cpp]
#      - name: thrust_directions # [py]
#        type: list[callable[[], numpy.ndarray] # [py]
#        description: Set of functions of time representing the thrust direction vector of each thrust source.
#
#      - name: thrustMagnitudes # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: thrust_magnitudes # [py]
#        type: list[callable[[], float] # [py]
#        description: Set of functions of time representing the thrust magnitude of each thrust source.
#
#    returns:
#        type: Eigen::Vector3d # [cpp]
#        type: numpy.ndarray # [py]
#        description: Net thrust direction vector.
#
#
#  # Body-fixed thrust direction
#  - name: getBodyFixedThrustDirection # [cpp]
#  - name: get_body_fixed_thrust_direction # [py]
#    short_summary: "Function to compute the body-fixed thrust direction from a thrust magnitude settings object."
#    extended_summary: |
#      Function to compute the thrust direction in the body-fixed frame from a thrust magnitude settings object.
#      Multiple types of thrust magnitude settings are supported (see ThrustMagnitudeTypes enum).
#
#    parameters:
#      - name: thrustDirections # [cpp]
#        type: std::vector<std::function<Eigen::Vector3d()>> # [cpp]
#      - name: thrust_directions # [py]
#        type: list[callable[[], numpy.ndarray] # [py]
#        description: Set of functions of time representing the thrust direction vector of each thrust source.
#
#      - name: thrustMagnitudes # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: thrust_magnitudes # [py]
#        type: list[callable[[], float] # [py]
#        description: Set of functions of time representing the thrust magnitude of each thrust source.
#
#    returns:
#        type: Eigen::Vector3d # [cpp]
#        type: numpy.ndarray # [py]
#        description: Net thrust direction vector.
#
#
#  # TODO: Thrust magnitude wrapper
#  - name: createThrustMagnitudeWrapper # [cpp]
#  - name: create_thrust_magnitude_wrapper # [py]
#    short_summary: "Function to compute the body-fixed thrust direction from a thrust magnitude settings object."
#    extended_summary: |
#      Function to compute the thrust direction in the body-fixed frame from a thrust magnitude settings object.
#      Multiple types of thrust magnitude settings are supported (see ThrustMagnitudeTypes enum).
#
#    parameters:
#      - name: thrustDirections # [cpp]
#        type: std::vector<std::function<Eigen::Vector3d()>> # [cpp]
#      - name: thrust_directions # [py]
#        type: list[callable[[], numpy.ndarray] # [py]
#        description: Set of functions of time representing the thrust direction vector of each thrust source.
#
#      - name: thrustMagnitudes # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: thrust_magnitudes # [py]
#        type: list[callable[[], float] # [py]
#        description: Set of functions of time representing the thrust magnitude of each thrust source.
#
#    returns:
#        type: Eigen::Vector3d # [cpp]
#        type: numpy.ndarray # [py]
#        description: Net thrust direction vector.
#
#
#  # Update thrust settings
#  - name: updateThrustSettings # [cpp]
#  - name: update_thrust_settings # [py]
#    short_summary: "Function to update the thrust settings (direction and magnitude)."
#    extended_summary: |
#      Function used to update the thrust settings (direction and magnitude) to the given time.
#
#    parameters:
#      - name: thrustMagnitudeWrapper # [cpp]
#        type: ThrustMagnitudeWrapper # [cpp]
#      - name: thrust_magnitude_wrapper # [py]
#        type: ThrustMagnitudeWrapper # [py]
#        description: Thrust magnitude wrapper object used during propagation to compute the thrust magnitude.
#
#      - name: thrustDirectionGuidance # [cpp]
#        type: BodyFixedForceDirectionGuidance # [cpp]
#      - name: thrust_direction_guidance # [py]
#        type: BodyFixedForceDirectionGuidance # [py]
#        description: Thrust direction guidance object object used during propagation to compute the body-fixed thrust direction.
#
#      - name: currentTime # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: current_time # [py]
#        type: list[callable[[], float] # [py]
#        description: Time at which the thrust direction and magnitude should be updated.
#
#
#  # Reset thrust settings
#  - name: resetThrustSettingsTime # [cpp]
#  - name: reset_thrust_settings_time # [py]
#    short_summary: "Function to reset the thrust settings (direction and magnitude)."
#    extended_summary: |
#      Function used to reset the current time relevant for the thrust settings (direction and magnitude).
#
#    parameters:
#      - name: thrustMagnitudeWrapper # [cpp]
#        type: ThrustMagnitudeWrapper # [cpp]
#      - name: thrust_magnitude_wrapper # [py]
#        type: ThrustMagnitudeWrapper # [py]
#        description: Thrust magnitude wrapper object used during propagation to compute the thrust magnitude.
#
#      - name: thrustDirectionGuidance # [cpp]
#        type: BodyFixedForceDirectionGuidance # [cpp]
#      - name: thrust_direction_guidance # [py]
#        type: BodyFixedForceDirectionGuidance # [py]
#        description: Thrust direction guidance object object used during propagation to compute the body-fixed thrust direction.
#
#      - name: currentTime # [cpp]
#        type: std::vector<std::function<double()> # [cpp]
#      - name: current_time # [py]
#        type: list[callable[[], float] # [py]
#        description: Time to which the old time should be updated (relevant for the thrust direction and magnitude).

  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
  ################## Thrust settings ( thrustSettings.h / thrustSettings.cpp ) ########################################
  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #

  # TODO: fix default input arguments
  # Reset thrust settings
  - name: getPropulsionInputVariables # [cpp]
  - name: get_propulsion_input_variables # [py]
    short_summary: "Function to create a list of functions that compute and return independent variables for the thrust."
    extended_summary: |
      Function to create a list of functions that compute and return independent variables for thrust and/or specific
      impulse. This parameterization is used to create a specific thrust magnitude type (see thrust magnitude from
      dependent variables). This function retrieves all input functions from the environment and a list of user-defined
      functions.

    parameters:
      - name: bodyWithGuidance # [cpp]
        type: Body # [cpp]
      - name: body_with_guidance # [py]
        type: Body # [py]
        description: Body object whose thrust guidance should be defined.

      - name: independentVariables # [cpp]
        type: std::vector<ThrustIndependentVariables> # [cpp]
      - name: independent_variables # [py]
        type: list[ThrustIndependentVariables] # [py]
        description: Set of dependent variables that should be used to compute the thrust.

      - name: guidanceInputFunctions # [cpp]
        type: std::vector<std::function<double()>, default=std::vector<std::function<double()>() # [cpp]
      - name: guidance_input_functions # [py]
        type: list[callable[[], float], default=[] # [py]
        description: Set of functions to compute the thrust, each associated to a specific dependent variable.


  ## Factory functions: thrust direction

  ## From state guidance
  #- name: thrustDirectionFromStateGuidanceSettings # [cpp]
  #- name: thrust_direction_from_state_guidance # [py]
    #short_summary: "Create thrust direction settings from the state guidance."
    #extended_summary: |
      #Factory function that creates thrust direction settings from the state guidance. In various simplified cases,
      #the thrust direction can be assumed to be in line with either the position or velocity of the body of interest
      #with respect to some other body.

    #parameters:
      #- name: centralBody # [cpp]
        #type: Body # [cpp]
      #- name: central_body # [py]
        #type: Body # [py]
        #description: Central body with respect to which the position and velocity of the body undergoing the thrust acceleration are computed.

      #- name: isColinearWithVelocity_ # [cpp]
        #type: bool # [cpp]
      #- name: is_colinear_with_velocity # [py]
        #type: bool # [py]
        #description: Whether the thrust direction is colinear with the velocity (true) or the position vector with respect to some other body (false).

      #- name: directionIsOppositeToVector_ # [cpp]
        #type: bool # [cpp]
      #- name: direction_is_opposite_to_vector # [py]
        #type: bool # [py]
        #description: Whether the thrust is pointing towards the thrusting body (true) or the central body (false).

    #returns:
        #type: ThrustDirectionFromStateGuidanceSettings
        #description: Thrust direction from state guidance settings object.

    #examples: | # [py]
      #In this example, we define a thrust orientation that is colinear with the velocity vector of the vehicle, with the thrust pointing towards the vehicle. # [py]

      #.. code-block:: python # [py]
        ## [py]
        ## Define thrust direction settings from state guidance # [py]
        #thrust.thrust_direction_from_state_guidance(
          #central_body, # [py]
          #is_colinear_with_velocity=True, # [py]
          #direction_is_opposite_to_vector=True # [py]
        #) # [py]


  ## From existing body orientation
  #- name: thrustFromExistingBodyOrientation # [cpp]
  #- name: thrust_from_existing_body_orientation # [py]
    #short_summary: "Create thrust direction settings from the existing body orientation."
    #extended_summary: |
      #Factory function that creates thrust direction settings from the existing body orientation. In some cases,
      #the vehicle’s orientation may be predetermined, either due to aerodynamic guidance or to the concurrent
      #propagation of the rotational equations of motion. In such a case, the thrust direction is computed from the
      #body-fixed thrust direction (defined in ThrustMagnitudeSettings) and the existing vehicle orientation.

    #returns:
        #type: ThrustDirectionSettings
        #description: Thrust direction settings object.

    #examples: | # [py]
      #In this example, we define the thrust orientation from the orientation of the vehicle that was already defined before. # [py]

      #.. code-block:: python # [py]
        ## [py]
        ## Define thrust orientation settings based on the orientation of the body at hand # [py]
        #thrust.thrust_from_existing_body_orientation() # [py]


  ## Custom thrust orientation (overload 1, cpp only)
  #- name: customThrustOrientationSettings # [cpp]
    #short_summary: "Create custom thrust orientation settings, expressed as a quaternion." # [cpp]
    #extended_summary: | # [cpp]
      #Factory function that creates custom thrust orientation settings, expressed through a quaternion. # [cpp]
      #As an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as # [cpp]
      #an arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be # [cpp]
      #defined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined). # [cpp]
      #The thrust orientation is provided through a unit quaternion representing the rotation # [cpp]
      #from body-fixed thrust direction to the inertial thrust direction. # [cpp]


    #parameters:
      #- name: thrustOrientationFunction # [cpp]
        #type: std::function<Eigen::Quaterniond(double)> # [cpp]
        #description: Function of time returning the quaternion representing the rotation between the thrust direction in the body-fixed frame to the inertial frame. # [cpp]

    #returns:
        #type: CustomThrustOrientationSettings # [cpp]
        #description: Custom thrust orientation settings object. # [cpp]


  ## Custom thrust orientation (overload 2)
  #- name: customThrustOrientationSettings # [cpp]
  #- name: custom_thrust_orientation # [py]
    #short_summary: "Create custom thrust orientation settings, expressed as a rotation matrix."
    #extended_summary: |
      #Factory function that creates custom thrust orientation settings, expressed through a rotation matrix.
      #As an alternative expression for generalized thrust direction guidance, the thrust orientation can be defined as
      #an arbitrary function of time. As with the custom thrust direction, this allows a broad range of options to be
      #defined, at the expense of increased complexity (somehow the thrust orientation needs to be manually defined).
      #The thrust orientation is provided through a rotation matrix representing the rotation
      #from body-fixed thrust direction to the inertial thrust direction.

    #parameters:
      #- name: thrustOrientationFunction # [cpp]
        #type: std::function<Eigen::Matrix3d(double)> # [cpp]
      #- name: thrust_orientation_function # [py]
        #type: callable[[float], numpy.ndarray] # [py]
        #description: Function of time returning the matrix representing the rotation between the thrust direction in the body-fixed frame to the inertial frame.

    #returns:
        #type: CustomThrustOrientationSettings
        #description: Custom thrust orientation settings object.

    #examples: | # [py]
      #In this example, we define a thrust orientation in the inertial frame using a custom function, taking the time as input. # [py]
      #In this case, the custom thrust direction function is made so that the thrust vector oscillates in the y-z inertial plane. # [py]

      #.. code-block:: python # [py]
        ## [py]
        ## Define thrust orientation settings based on a function of time # [py]
        #thrust.custom_thrust_orientation(thrust_orientation_function) # [py]


  ## Custom thrust direction
  #- name: customThrustDirectionSettings # [cpp]
  #- name: custom_thrust_direction # [py]
    #short_summary: "Create custom thrust direction settings, expressed as a vector in the inertial frame."
    #extended_summary: |
      #Factory function that creates custom thrust direction settings, expressed as a unit vector in the inertial frame.
      #For a generalized thrust direction guidance, the thrust can be defined as an arbitrary function of time.
      #This allows a broad range of options to be defined, at the expense of increased complexity (somehow the thrust
      #direction needs to be manually defined).

    #parameters:
      #- name: thrustDirectionFunction # [cpp]
        #type: std::function<Eigen::Vector3d(double)> # [cpp]
      #- name: thrust_direction_function # [py]
        #type: callable[[float], numpy.ndarray] # [py]
        #description: Function of time returning the thrust direction in the inertial frame.

    #returns:
        #type: CustomThrustDirectionSettings
        #description: Custom thrust direction settings object.

    #examples: | # [py]
      #In this example, we define a thrust direction in the inertial frame using a custom function, taking the time as input. # [py]
      #In this case, the custom thrust direction function is made so that the thrust vector oscillates in the y-z inertial plane. # [py]

      #.. code-block:: python # [py]
        ## [py]
        ## Define a function for the thrust orientation as a function of time # [py]
        #def thrust_direction_function(time): # [py]
            #thrust_direction = np.array([0, np.sin(time*np.pi/1000), -np.cos(time*np.pi/1000)]) # [py]
            #return thrust_direction/np.linalg.norm(thrust_direction) # [py]

        ## Define thrust direction settings based on a function of time # [py]
        #thrust.custom_thrust_direction(thrust_direction_function) # [py]


  ## Modified equinoctial elements costate-based thrust direction (overload 1)
  #- name: meeCostateBasedThrustDirectionSettings # [cpp]
  #- name: custom_thrust_direction # [py]
    #short_summary: "Create thrust direction settings, expressed through modified equinoctial elements costates."
    #extended_summary: |
      #Factory function that creates thrust direction settings, expressed through modified equinoctial elements costates.
      #By using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements
      #are used to determine the direction of the thrust. Details of this model are given by Kluever (2010),
      #Boudestijn (2014) and Hogervorst (2017). This function takes variable costates as an interpolator over time.

    #parameters:
      #- name: vehicleName # [cpp]
        #type: std::string # [cpp]
      #- name: vehicle_name # [py]
        #type: str # [py]
        #description: Name of the body undergoing thrust.

      #- name: centralBodyName # [cpp]
        #type: std::string # [cpp]
      #- name: central_body_name # [py]
        #type: str # [py]
        #description: Name of the central body with respect to which the Modified Equinoctial Elements are computed.

      #- name: costateInterpolator # [cpp]
        #type: OneDimensionalInterpolator<double, Eigen::VectorXd> # [cpp]
      #- name: costate_interpolator # [py]
        #type: OneDimensionalInterpolator<float, numpy.ndarray> # [py]
        #description: Interpolator object returning the five costates with time as an independent variable.

    #returns:
        #type: MeeCostateBasedThrustDirectionSettings
        #description: Modified Equinoctial Elements costate-based thrust direction settings object.


  ## Modified equinoctial elements costate-based thrust direction (overload 2)
  #- name: meeCostateBasedThrustDirectionSettings # [cpp]
  #- name: custom_thrust_direction # [py]
    #short_summary: "Create thrust direction settings, expressed through modified equinoctial elements costates."
    #extended_summary: |
      #Factory function that creates thrust direction settings, expressed through modified equinoctial elements costates.
      #By using these settings for the thrust direction, the so-called co-states of the Modified Equinoctial elements
      #are used to determine the direction of the thrust. Details of this model are given by Kluever (2010),
      #Boudestijn (2014) and Hogervorst (2017). This function takes constant costates.

    #parameters:
      #- name: vehicleName # [cpp]
        #type: std::string # [cpp]
      #- name: vehicle_name # [py]
        #type: str # [py]
        #description: Name of the body undergoing thrust.

      #- name: centralBodyName # [cpp]
        #type: std::string # [cpp]
      #- name: central_body_name # [py]
        #type: str # [py]
        #description: Name of the central body with respect to which the Modified Equinoctial Elements are computed.

      #- name: constantCostates # [cpp]
        #type: Eigen::VectorXd # [cpp]
      #- name: constant_costates # [py]
        #type: numpy.ndarray # [py]
        #description: Set of five constant costates.

    #returns:
        #type: MeeCostateBasedThrustDirectionSettings
        #description: Modified Equinoctial Elements costate-based thrust direction settings object.

  # Factory functions: thrust magnitude

  # Constant thrust magnitude
  - name: constantThrustMagnitudeSettings # [cpp]
  - name: constant_thrust_magnitude # [py]
    short_summary: "Create thrust magnitude settings from a constant thrust magnitude and Isp."
    extended_summary: |
      Factory function that creates constant thrust magnitude settings. The specific impulse to use for the thrust is
      also supplied when applying a mass rate model in the propagation of the vehicle dynamics, relating the thrust
      to the mass decrease of the vehicle.

    parameters:
      - name: thrustMagnitude # [cpp]
        type: double # [cpp]
      - name: thrust_magnitude # [py]
        type: float # [py]
        description: Value of the constant thrust magnitude.

      - name: specificImpulse # [cpp]
        type: double # [cpp]
      - name: specific_impulse # [py]
        type: float # [py]
        description: Value of the constant specific impulse, used to link the thrust model to the mass propagation.

    returns:
        type: ConstantThrustMagnitudeSettings
        description: Constant thrust magnitude settings object.

    examples: | # [py]
      In this example, we define constant thrust magnitude of 1.5 kN and a specific impulse of 315 s. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define constant thrust magnitude settings of 1.5kN, an Isp of 315s # [py]
        thrust.constant_thrust_magnitude( # [py]
            thrust_magnitude=1.5e3, # [py]
            specific_impulse=315 # [py]
        ) # [py]


  # Custom thrust magnitude
  - name: fromFunctionThrustMagnitudeSettings # [cpp]
  - name: custom_thrust_magnitude # [py]
    short_summary: "Create thrust magnitude settings from a custom thrust force magnitude function."
    extended_summary: |
      Factory function that creates thrust magnitude from a custom thrust force magnitude function.
      This model defines a thrust force and specific impulse that can vary with time. The thrust acceleration
      is computed during the propagation by dividing the thrust force by the current vehicle mass.
      The specific impulse can be used to apply a mass rate model in the propagation the vehicle dynamics, relating the thrust to the mass
      decrease of the vehicle.

    parameters:
      - name: thrustMagnitudeFunction # [cpp]
        type: std::function<double(double)> # [cpp]
      - name: thrust_magnitude_function # [py]
        type: callable[[float], float] # [py]
        description: Function of time returning the value of the thrust force magnitude.

      - name: specificImpulseFunction # [cpp]
        type: std::function<double(double)> # [cpp]
      - name: specific_impulse_function # [py]
        type: callable[[float], float] # [py]
        description: Function of time returning the value of the specific impulse, useful to link the mass propagation to the thrust model.

    returns:
        type: FromFunctionThrustMagnitudeSettings
        description: From function thrust magnitude settings object.

    examples: | # [py]
      In this example, we define a thrust force magnitude based on a set of custom functions. # [py]
      The magnitude itself starts from 500N, and linearly increases with time. # [py]
      The specific impulse is constant, at 350s. Note that we use a `lambda` function to achieve this neatly. # [py]
      Finally, the engine is setup to work for 50s, and be turned off afterwards. # [py]

      .. code-block:: python # [py]
        # [py]
        # Define the thrust magnitude function: thrust increases linearly with time # [py]
        def thrust_magnitude_function(time): # [py]
            return 500 + time/2 # [py]

        # Define a lambda specific impulse function: constant at 350s # [py]
        specific_impulse_function = lambda time: 350 # [py]

        # Define the custom thrust magnitude settings based on the pre-defined functions # [py]
        thrust.custom_thrust_magnitude(thrust_magnitude_function, specific_impulse_function ) # [py]

  # Custom thrust magnitude
  - name: custom_thrust_magnitude_fixed_isp # [py]
    short_summary: "Same as :func:`~custom_thrust_magnitude`, but with a fixed value for the specific impulse."

    parameters:
      - name: thrustMagnitudeFunction # [cpp]
        type: std::function<double(double)> # [cpp]
      - name: thrust_magnitude_function # [py]
        type: callable[[float], float] # [py]
        description: Function of time returning the value of the thrust force magnitude.

      - name: specificImpulse # [cpp]
        type: double # [cpp]
      - name: specific_impulse # [py]
        type: float # [py]
        description: Constant value for specific impulse, useful to link the mass propagation to the thrust model.

    returns:
        type: FromFunctionThrustMagnitudeSettings
        description: From function thrust magnitude settings object.



  # Custom thrust magnitude
  - name: custom_thrust_acceleration_magnitude # [py]
    short_summary: "Create thrust magnitude settings from a custom thrust acceleration magnitude function."
    extended_summary: |
      Factory function that creates thrust magnitude from a custom thrust acceleration magnitude function.
      This model is similar to the :func:`~custom_thrust_magnitude`, with the difference being that this function
      directly provides the thrust *acceleration*, not the thrust *force*.

    parameters:
      - name: thrust_acceleration_magnitude_function # [py]
        type: callable[[float], float] # [py]
        description: Function of time returning the value of the thrust acceleration magnitude.

      - name: specific_impulse_function # [py]
        type: callable[[float], float] # [py]
        description: Function of time returning the value of the specific impulse, useful to link the mass propagation to the thrust model.

    returns:
        type: FromFunctionThrustMagnitudeSettings
        description: From function thrust magnitude settings object.


  # Custom thrust magnitude
  - name: custom_thrust_acceleration_magnitude_fixed_isp # [py]
    short_summary: "Same as :func:`~custom_thrust_acceleration_magnitude`, but with a fixed value for the specific impulse."

    parameters:
      - name: thrust_acceleration_magnitude_function # [py]
        type: callable[[float], float] # [py]
        description: Function of time returning the value of the thrust acceleration magnitude.

      - name: specific_impulse # [py]
        type: float # [py]
        description: Constant value for specific impulse, useful to link the mass propagation to the thrust model.

    returns:
        type: FromFunctionThrustMagnitudeSettings
        description: From function thrust magnitude settings object.

