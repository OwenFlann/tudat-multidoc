extended_summary: |
  This module provides the functionality for creating integrator
  settings.

# The structure of this file follows the order of expose_integrator_setup.cpp (tudatpy) and
# includes content for createNumericalIntegrator.h and bulirschStoerVariableStepsizeIntegrator.h (tudat)


enums:

  #    py::enum_<tni::AvailableIntegrators>
  #        enum tudat::numerical_integrators::AvailableIntegrators

  - name: AvailableIntegrators
    short_summary: "Enumeration of integrators available with tudat."

    members:
      - name: runge_kutta_fixed_step_size_type # [py]
      - name: runge_kutta_variable_step_size_type # [py]
      - name: bulirsch_stoer_type # [py]
      - name: adams_bashforth_moulton_type # [py]


  #    py::enum_<tni::CoefficientSets>
  #        enum tudat::numerical_integrators::CoefficientSets

  - name: CoefficientSets
    short_summary: "Coefficient sets for Runge-Kutta-type integrators."
    extended_summary: |
      Coefficient sets for Runge-Kutta-type integrators. The coefficients are defined
      in a Butcher Tableau, with an coefficient set yielding an x(y) method yielding an integrator
      with global truncation error of :math:`O(\Delta t^{x})`. Some of these coefficients also contain an embedded integrator of :math:`O(\Delta t^{y})`
      for step size control.

    members:
      - name: euler_forward # [py]
        description: "Coefficients for the classic forward Euler method" # [py]
      - name: rk_4 # [py]
        description: "Coefficients for the original Runge-Kutta method of order 4" # [py]
      - name: explicit_mid_point # [py]
        description: "Coefficients for the explicit midpoint method" # [py]
      - name: explicit_trapezoid_rule # [py]
        description: "Coefficients for the explicit trapezoid rule, also called Heun's method or improved Euler's method" # [py]
      - name: ralston # [py]
        description: "Coefficients for Ralston's method" # [py]
      - name: rk_3 # [py]
        description: "Coefficients for the Runge-Kutta method of order 3" # [py]
      - name: ralston_3 # [py]
        description: "Coefficients for Ralston's third-order method" # [py]
      - name: SSPRK3 # [py]
        description: "Coefficients for the Strong Stability Preserving Runge-Kutta third-order method" # [py]
      - name: ralston_4 # [py]
        description: "Coefficients for Ralston's fourth-order method" # [py]
      - name: three_eight_rule_rk_4 # [py]
        description: "Coefficients for the classic Runge Kutta 3/8-rule fourth-order method" # [py]
      - name: rkf_12 # [py]
        description: "Coefficients for the Runge-Kutta-Fehlberg method of order 2 with an embedded 1st order" # [py]
      - name: heun_euler # [py]
        description: "Coefficients for the Heun's method of order 2 with an embedded Euler method of order 1" # [py]
      - name: rkf_45 # [py]
        description: "Coefficients for the Runge-Kutta-Fehlberg method of order 5 with an embedded 4th order" # [py]
      - name: rkf_56 # [py]
        description: "Coefficients for the Runge-Kutta-Fehlberg method of order 6 with an embedded 5th order" # [py]
      - name: rkf_78 # [py]
        description: "Coefficients for the Runge-Kutta-Fehlberg method of order 8 with an embedded 7th order" # [py]
      - name: rkdp_87 # [py]
        description: "Coefficients for the Dormand-Prince method of order 7 with an embedded 8th order" # [py]
      - name: rkf_89 # [py]
        description: "Coefficients for the Runge-Kutta-Fehlberg method of order 9 with an embedded 8th order" # [py]
      - name: rkv_89 # [py]
        description: "Coefficients for the Runge-Kutta-Verner method of order 9 with an embedded 8th order" # [py]
      - name: rkf_108 # [py]
        description: "Coefficients for the Runge-Kutta-Feagin method of order 8 with an embedded 10th order" # [py]
      - name: rkf_1210 # [py]
        description: "Coefficients for the Runge-Kutta-Feagin method of order 10 with an embedded 12ve order" # [py]
      - name: rkf_1412 # [py]
        description: "Coefficients for the Runge-Kutta-Feagin method of order 12 with an embedded 14th order" # [py]

  #    py::enum_<tni::RungeKuttaCoefficients::OrderEstimateToIntegrate>
  #        enum tudat::numerical_integrators::RungeKuttaCoefficients::OrderEstimateToIntegrate

  - name: OrderToIntegrate
    short_summary: "Which integrator order needs to be integrated, only for coefficient sets with an embedded order."

    members:
      - name: lower # [py]
      - name: higher # [py]

  #       py::enum_<tni::ExtrapolationMethodStepSequences>
  #           enum tudat::numerical_integrators::ExtrapolationMethodStepSequences

  - name: ExtrapolationMethodStepSequences
    short_summary: "Enumeration of available extrapolation method step sequences."
    #extended_summary: |
      #Enumeration of extrapolation method step sequences supported by tudat.

    members:
      - name: bulirsch_stoer_sequence
      - name: deufelhard_sequence

  ######


classes:

  # base
  - name: IntegratorSettings
    short_summary: "Functional base class to define settings for integrators."
    extended_summary: |
      Class to define settings for numerical integrators, for instance for use in numerical integration of equations of motion/
      variational equations. This class can be used for simple integrators such as fixed step RK and Euler. Integrators that
      require more settings to define have their own derived class.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]

    attributes:
      - name: initial_time # [py]
        type: float # [py]
        description: Initial time of the integration. # [py]


  # derived (1)
  - name: RungeKuttaFixedStepSizeSettings
    short_summary: "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with a fixed step size"

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


  # derived (2)
  - name: RungeKuttaVariableStepSizeSettingsScalarTolerances
    short_summary: "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with scalar tolerances."
    extended_summary: |
      This
      class is actually derived from an intermediate class (`RungeKuttaVariableStepSizeBaseSettings`, not documented),
      which is derived directly from `IntegratorSettings`.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


  # derived (3)
  - name: RungeKuttaVariableStepSizeSettingsVectorTolerances
    short_summary: "`IntegratorSettings`-derived class to define settings for Runge Kutta integrators with vector tolerances."
    extended_summary: |
      This class is actually derived from an intermediate class (`RungeKuttaVariableStepSizeBaseSettings`, not documented),
      which is derived directly from `IntegratorSettings`.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


  # derived (3)
  - name: BulirschStoerIntegratorSettings
    short_summary: "`IntegratorSettings`-derived class to define settings for Bulirsch-Stoer integrator settings."

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


  # derived (4)
  - name: AdamsBashforthMoultonSettings
    short_summary: "`IntegratorSettings`-derived class to define settings for Adams-Bashforth-Moulton integrator settings."

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for integrators should be instantiated through the factory functions of a derived class." # [cpp]


functions:

  # Print Butcher's tableau
  - name: print_butcher_tableau # [py]
  - name: printButcherTableau # [cpp]
    short_summary: "Print the Butcher tableau of a given coefficient set."

    parameters:
      - name: coefficient_set # [py]
        type: CoefficientSets # [py]
      - name: coefficientSet # [cpp]
        type: CoefficientSets # [cpp]
        description: "Coefficient set of which the Butcher tableau will be printed."

  # Runge Kutta fixed step size
  - name: runge_kutta_fixed_step_size # [py]
  - name: rungeKuttaFixedStepSettings # [cpp]
    short_summary: "Creates the settings for the Runge-Kutta fixed step size integrator."
    extended_summary: |
      Factory function to create settings for the Runge-Kutta integrator with a constant step size.
      Different coefficient sets (Butcher's tableau) can be used (see the `CoefficientSets` enum).

    parameters:

      - name: initial_time_step # [py]
        type: float # [py]
      - name: initialTimeStep # [cpp]
        type: double # [cpp]
        description: "Initial time step to be used."

      - name: coefficient_set # [py]
        type: CoefficientSets # [py]
      - name: coefficientSet # [cpp]
        type: CoefficientSets # [cpp]
        description: "Coefficient set (Butcher's tableau) to be used in the integration."

      - name: order_to_use # [py]
        type: OrderToIntegrate, default=OrderToIntegrate.lower # [py]
      - name: orderToUse # [cpp]
        type: OrderToIntegrate, default=OrderToIntegrate.lower # [cpp]
        description: |
          If the coefficient set is supposed to be for variable step sizes (with an embedded method of a different order),
          this parameter can be used to set the order that will be used.

      - name: save_frequency # [py]
        type: int, default=1 # [py]
      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
        description: |
          Frequency at which to save the numerical integrated states (expressed per unit integration time step,
          with n = saveFrequency, so n = 2 means that the state is saved every two integration steps).

      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
        description: |
          Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the
          integrator (true) or only at the end of each integration step (false).

  # Runge Kutta variable step size with scalar tolerances (cpp)
  - name: runge_kutta_variable_step_size # [py]
  - name: rungeKuttaVariableStepSettingsScalarTolerances # [cpp]
    short_summary: "Creates the settings for the Runge-Kutta variable step size integrator with scalar tolerances."
    extended_summary: |
      Factory function to create settings for the Runge-Kutta variable step size integrator with scalar tolerances.
      For this integrator, the step size is varied based on the tolerances and safety factor provided.
      The tolerance is composed of an absolute and a relative part.
      Different coefficient sets (Butcher's tableau) can be used (see the `CoefficientSets` enum).

    parameters:

      - name: initial_time_step # [py]
        type: float # [py]
      - name: initialTimeStep # [cpp]
        type: double # [cpp]
        description: "Initial time step to be used."

      - name: coefficient_set # [py]
        type: CoefficientSets # [py]
      - name: coefficientSet # [cpp]
        type: CoefficientSets # [cpp]
        description: "Coefficient set (Butcher's tableau) to be used in the integration."

      - name: minimum_step_size # [py]
        type: float # [py]
      - name: minimumStepSize # [cpp]
        type: double # [cpp]
        description: "Minimum time step to be used during the integration."

      - name: maximum_step_size # [py]
        type: float # [py]
      - name: maximumStepSize # [cpp]
        type: double # [cpp]
        description: "Maximum time step to be used during the integration."

      - name: relative_error_tolerance # [py]
        type: numpy.ndarray[numpy.float64[m, n]] # [py]
      - name: relativeErrorTolerance # [cpp]
        type: Eigen::Matrix # [cpp]
        description: "Relative vector tolerance to adjust the time step."

      - name: absolute_error_tolerance # [py]
        type: numpy.ndarray[numpy.float64[m, n]] # [py]
      - name: absoluteErrorTolerance # [cpp]
        type: Eigen::Matrix # [cpp]
        description: "Absolute vector tolerance to adjust the time step."

      - name: save_frequency # [py]
        type: int, default=1 # [py]
      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
        description: |
          Frequency at which to save the numerical integrated states (expressed per unit integration time step,
          with n = saveFrequency, so n = 2 means that the state is saved every two integration steps).

      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
        description: |
          Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the
          integrator (true) or only at the end of each integration step (false).

      - name: safety_factor # [py]
        type: float, default=0.8 # [py]
      - name: safetyFactorForNextStepSize # [cpp]
        type: double, default=0.8 # [cpp]
        description: "Safety factor used in the step size control."

      - name: maximum_factor_increase # [py]
        type: float, default=4.0 # [py]
      - name: maximumFactorIncreaseForNextStepSize # [cpp]
        type: double, default=4.0 # [cpp]
        description: |
          Maximum increase between consecutive time steps, expressed as the factor between new and old step size.

      - name: minimum_factor_increase # [py]
        type: float, default=0.1 # [py]
      - name: minimumFactorDecreaseForNextStepSize # [cpp]
        type: double, default=0.1 # [cpp]
        description: |
          Minimum increase between consecutive time steps, expressed as the factor between new and old step size.

      - name: throw_exception_if_minimum_step_exceeded # [py]
        type: bool, default=true # [py]
        description: |
          If set to false, the variable step integrator will use the minimum step size specified when the algorithm
          computes the optimum one to be lower, instead of throwing an exception.

    returns:
        type: RungeKuttaVariableStepSettingsScalarTolerances # [py]
        description: RungeKuttaVariableStepSettingsScalarTolerances object. # [py]
        type: RungeKuttaVariableStepSettingsScalarTolerances # [cpp]
        description: RungeKuttaVariableStepSettingsScalarTolerances object. # [cpp]



  # Runge Kutta variable step size with vector tolerances
  - name: runge_kutta_variable_step_size_vector_tolerances # [py]
  - name: rungeKuttaVariableStepSettingsVectorTolerances # [cpp]
    short_summary: "Creates the settings for the Runge-Kutta variable step size integrator with vector tolerances."
    extended_summary: |
      Factory function to create settings for the Runge-Kutta variable step size integrator with vector tolerances.
      For this integrator, the step size is varied based on the tolerances and safety factor provided.
      The tolerance is composed of an absolute and a relative part.
      Different coefficient sets (Butcher's tableau) can be used (see the `CoefficientSets` enum).

    parameters:
      - name: initial_time_step # [py]
        type: float # [py]
      - name: initialTimeStep # [cpp]
        type: double # [cpp]
        description: "Initial time step to be used."

      - name: coefficient_set # [py]
        type: CoefficientSets # [py]
      - name: coefficientSet # [cpp]
        type: CoefficientSets # [cpp]
        description: "Coefficient set (Butcher's tableau) to be used in the integration."

      - name: minimum_step_size # [py]
        type: float # [py]
      - name: minimumStepSize # [cpp]
        type: double # [cpp]
        description: "Minimum time step to be used during the integration."

      - name: maximum_step_size # [py]
        type: float # [py]
      - name: maximumStepSize # [cpp]
        type: double # [cpp]
        description: "Maximum time step to be used during the integration."

      - name: relative_error_tolerance # [py]
        type: numpy.ndarray[numpy.float64[m, n]] # [py]
      - name: relativeErrorTolerance # [cpp]
        type: Eigen::Matrix # [cpp]
        description: "Relative vector tolerance to adjust the time step."

      - name: absolute_error_tolerance # [py]
        type: numpy.ndarray[numpy.float64[m, n]] # [py]
      - name: absoluteErrorTolerance # [cpp]
        type: Eigen::Matrix # [cpp]
        description: "Absolute vector tolerance to adjust the time step."

      - name: save_frequency # [py]
        type: int, default=1 # [py]
      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
        description: |
          Frequency at which to save the numerical integrated states (expressed per unit integration time step,
          with n = saveFrequency, so n = 2 means that the state is saved every two integration steps).

      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
        description: |
          Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the
          integrator (true) or only at the end of each integration step (false).

      - name: safety_factor # [py]
        type: float, default=0.8 # [py]
      - name: safetyFactorForNextStepSize # [cpp]
        type: double, default=0.8 # [cpp]
        description: "Safety factor used in the step size control."

      - name: maximum_factor_increase # [py]
        type: float, default=4.0 # [py]
      - name: maximumFactorIncreaseForNextStepSize # [cpp]
        type: double, default=4.0 # [cpp]
        description: |
          Maximum increase between consecutive time steps, expressed as the factor between new and old step size.

      - name: minimum_factor_increase # [py]
        type: float, default=0.1 # [py]
      - name: minimumFactorDecreaseForNextStepSize # [cpp]
        type: double, default=0.1 # [cpp]
        description: |
          Minimum increase between consecutive time steps, expressed as the factor between new and old step size.

      - name: throw_exception_if_minimum_step_exceeded # [py]
        type: bool, default=true # [py]
        description: |
          If set to false, the variable step integrator will use the minimum step size specified when the algorithm
          computes the optimum one to be lower, instead of throwing an exception.

    returns:
        type: RungeKuttaVariableStepSizeSettingsVectorTolerances # [py]
        description: RungeKuttaVariableStepSizeSettingsVectorTolerances object. # [py]
        type: RungeKuttaVariableStepSizeSettingsVectorTolerances # [cpp]
        description: RungeKuttaVariableStepSizeSettingsVectorTolerances object. # [cpp]


  # Bulirsch-Stoer integrator
  - name: bulirschStoerIntegratorSettings # [cpp]
  - name: bulirsch_stoer # [py]
    short_summary: "Creates the settings for the Bulirsch-Stoer integrator."
    extended_summary: |
      Factory function to create settings for the Bulirsch-Stoer integrator.
      For this integrator, the step size is varied based on the tolerances and safety factor provided.
      The tolerance is composed of an absolute and a relative part.
      Different extrapolation sequences can be used (see the `ExtrapolationMethodStepSequences` enum).

    parameters:
      - name: initialTimeStep # [cpp]
        type: double # [cpp]
      - name: initial_time_step # [py]
        type: float # [py]
        description: Initial time step to be used.

      - name: extrapolationSequence # [cpp]
        type: ExtrapolationMethodStepSequences # [cpp]
      - name: extrapolation_sequence # [py]
        type: ExtrapolationMethodStepSequences # [py]
        description: Extrapolation sequence to be used in the integration.

      - name: maximumNumberOfSteps # [cpp]
        type: int # [cpp]
      - name: maximum_number_of_steps # [py]
        type: int # [py]
        description: Number of entries in the sequence (e.g., number of integrations used for a single extrapolation).

      - name: minimumStepSize # [cpp]
        type: double # [cpp]
      - name: minimum_step_size # [py]
        type: float # [py]
        description: Minimum time step to be used during the integration.

      - name: maximumStepSize # [cpp]
        type: double # [cpp]
      - name: maximum_step_size # [py]
        type: float # [py]
        description: Maximum time step to be used during the integration.

      - name: relativeErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: relative_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: absoluteErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: absolute_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 2 means that the state is saved every two integration steps).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

      - name: safetyFactorForNextStepSize # [cpp]
        type: double, default=0.7 # [cpp]
      - name: safety_factor # [py]
        type: float, default=0.7 # [py]
        description: Safety factor used in the step size control.

      - name: maximumFactorIncreaseForNextStepSize # [cpp]
        type: double, default=10.0 # [cpp]
      - name: maximum_factor_increase # [py]
        type: float, default=10.0 # [py]
        description: Maximum increase between consecutive time steps, expressed as the factor between new and old step size.

      - name: minimumFactorDecreaseForNextStepSize # [cpp]
        type: double, default=0.1 # [cpp]
      - name: minimum_factor_increase # [py]
        type: float, default=0.1 # [py]
        description: Minimum increase between consecutive time steps, expressed as the factor between new and old step size.

    returns:
        type: BulirschStoerIntegratorSettings
        description: BulirschStoerIntegratorSettings object.


 # Adams-Bashforth-Moulton integrator
  - name: adamsBashforthMoultonSettings # [cpp]
  - name: adams_bashforth_moulton # [py]
    short_summary: "Creates the settings for the Adams-Bashforth-Moulton integrator."
    extended_summary: |
      Factory function to create settings for the Adams-Bashforth-Moulton integrator.
      For this integrator, the step size is varied based on the tolerances and safety factor provided.
      The tolerance is composed of an absolute and a relative part.

    parameters:
      - name: initialTimeStep # [cpp]
        type: double # [cpp]
      - name: initial_time_step # [py]
        type: float # [py]
        description: Initial time step to be used.

      - name: minimumStepSize # [cpp]
        type: double # [cpp]
      - name: minimum_step_size # [py]
        type: float # [py]
        description: Minimum time step to be used during the integration.

      - name: maximumStepSize # [cpp]
        type: double # [cpp]
      - name: maximum_step_size # [py]
        type: float # [py]
        description: Maximum time step to be used during the integration.

      - name: relativeErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: relative_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: absoluteErrorTolerance # [cpp]
        type: double, default=1.0E-12 # [cpp]
      - name: absolute_error_tolerance # [py]
        type: float, default=1.0E-12 # [py]
        description: Relative tolerance to adjust the time step.

      - name: minimumOrder # [cpp]
        type: int, default=6 # [cpp]
      - name: minimum_order # [py]
        type: int, default=6 # [cpp]
        description: Minimum order of the integrator.

      - name: maximumOrder # [cpp]
        type: int, default=11 # [cpp]
      - name: maximum_order # [py]
        type: int, default=11 # [cpp]
        description: Maximum order of the integrator.

      - name: saveFrequency # [cpp]
        type: int, default=1 # [cpp]
      - name: save_frequency # [py]
        type: int, default=1 # [py]
        description: Frequency at which to save the numerical integrated states (expressed per unit integration time step, with n = saveFrequency, so n = 2 means that the state is saved every two integration steps).

      - name: assessTerminationOnMinorSteps # [cpp]
        type: bool, default=false # [cpp]
      - name: assess_termination_on_minor_steps # [py]
        type: bool, default=false # [py]
        description: Whether the propagation termination conditions should be evaluated during the intermediate sub-steps of the integrator (true) or only at the end of each integration step (false).

      - name: bandwidth # [cpp]
        type: double, default=200.0 # [cpp]
      - name: bandwidth # [py]
        type: float, default=200.0 # [py]
        description: Maximum error factor for doubling the step size.

    returns:
        type: AdamsBashforthMoultonSettings
        description: AdamsBashforthMoultonSettings object.
