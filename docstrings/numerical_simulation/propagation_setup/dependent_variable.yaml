extended_summary: |
  This module provides the functionality for creating dependent variable
  settings. Note that *all* output is in SI units (meters, radians, seconds). All epochs are provided in seconds since J2000.

# the structure of this file follows the order of expose_propagation_setup.cpp (tudatpy) and
# includes content for propagationOutputSettings.h (tudat)

references: |
  .. [1] Mooij, E. The motion of a vehicle in a planetary atmosphere.
         Delft University of Technology, Faculty of Aerospace Engineering,
         Report LR-768 (1994).


enums:

  #    py::enum_<tp::PropagationDependentVariables>
  #        enum tudat::propagators::PropagationDependentVariables

  - name: PropagationDependentVariables
    short_summary: "Enumeration of available propagation dependent variables."
    extended_summary: |
      Enumeration of propagation dependent variables supported by tudat.

    members:

    - name: mach_number_dependent_variable # [cpp]
    - name: altitude_dependent_variable # [cpp]
    - name: airspeed_dependent_variable # [cpp]
    - name: local_density_dependent_variable # [cpp]
    - name: relative_speed_dependent_variable # [cpp]
    - name: relative_position_dependent_variable # [cpp]
    - name: relative_distance_dependent_variable # [cpp]
    - name: relative_velocity_dependent_variable # [cpp]
    - name: radiation_pressure_dependent_variable # [cpp]
    - name: total_acceleration_norm_dependent_variable # [cpp]
    - name: single_acceleration_norm_dependent_variable # [cpp]
    - name: total_acceleration_dependent_variable # [cpp]
    - name: single_acceleration_dependent_variable # [cpp]
    - name: aerodynamic_force_coefficients_dependent_variable # [cpp]
    - name: aerodynamic_moment_coefficients_dependent_variable # [cpp]
    - name: inertial_to_body_fixed_rotation_matrix_variable # [cpp]
    - name: intermediate_aerodynamic_rotation_matrix_variable # [cpp]
    - name: relative_body_aerodynamic_orientation_angle_variable # [cpp]
    - name: body_fixed_airspeed_based_velocity_variable # [cpp]
    - name: total_aerodynamic_g_load_variable # [cpp]
    - name: local_temperature_dependent_variable # [cpp]
    - name: geodetic_latitude_dependent_variable # [cpp]
    - name: control_surface_deflection_dependent_variable # [cpp]
    - name: total_mass_rate_dependent_variables # [cpp]
    - name: tnw_to_inertial_frame_rotation_dependent_variable # [cpp]
    - name: periapsis_altitude_dependent_variable # [cpp]
    - name: total_torque_norm_dependent_variable # [cpp]
    - name: single_torque_norm_dependent_variable # [cpp]
    - name: total_torque_dependent_variable # [cpp]
    - name: single_torque_dependent_variable # [cpp]
    - name: body_fixed_groundspeed_based_velocity_variable # [cpp]
    - name: keplerian_state_dependent_variable # [cpp]
    - name: modified_equinoctial_state_dependent_variable # [cpp]
    - name: spherical_harmonic_acceleration_terms_dependent_variable # [cpp]
    - name: spherical_harmonic_acceleration_norm_terms_dependent_variable # [cpp]
    - name: body_fixed_relative_cartesian_position # [cpp]
    - name: body_fixed_relative_spherical_position # [cpp]
    - name: total_gravity_field_variation_acceleration # [cpp]
    - name: single_gravity_field_variation_acceleration # [cpp]
    - name: single_gravity_field_variation_acceleration_terms # [cpp]
    - name: acceleration_partial_wrt_body_translational_state # [cpp]
    - name: local_dynamic_pressure_dependent_variable # [cpp]
    - name: euler_angles_to_body_fixed_313 # [cpp]
    - name: current_body_mass_dependent_variable # [cpp]
    - name: radiation_pressure_coefficient_dependent_variable # [cpp]

    - name: mach_number_type # [py]
    - name: altitude_type # [py]
    - name: airspeed_type # [py]
    - name: local_density_type # [py]
    - name: relative_speed_type # [py]
    - name: relative_position_type # [py]
    - name: relative_distance_type # [py]
    - name: relative_velocity_type # [py]
    - name: radiation_pressure_type # [py]
    - name: total_acceleration_norm_type # [py]
    - name: single_acceleration_norm_type # [py]
    - name: total_acceleration_type # [py]
    - name: single_acceleration_type # [py]
    - name: aerodynamic_force_coefficients_type # [py]
    - name: aerodynamic_moment_coefficients_type # [py]
    - name: rotation_matrix_to_body_fixed_frame_type # [py]
    - name: intermediate_aerodynamic_rotation_matrix_type # [py]
    - name: relative_body_aerodynamic_orientation_angle_type # [py]
    - name: body_fixed_airspeed_based_velocity_type # [py]
    - name: total_aerodynamic_g_load_type # [py]
    - name: local_temperature_type # [py]
    - name: geodetic_latitude_type # [py]
    - name: control_surface_deflection_type # [py]
    - name: total_mass_rate_type # [py]
    - name: tnw_to_inertial_frame_rotation_type # [py]
    - name: periapsis_altitude_type # [py]
    - name: total_torque_norm_type # [py]
    - name: single_torque_norm_type # [py]
    - name: total_torque_type # [py]
    - name: single_torque_type # [py]
    - name: body_fixed_groundspeed_based_velocity_type # [py]
    - name: keplerian_state_type # [py]
    - name: modified_equinoctial_state_type # [py]
    - name: spherical_harmonic_acceleration_terms_type # [py]
    - name: spherical_harmonic_acceleration_norm_terms_type # [py]
    - name: body_fixed_relative_cartesian_position_type # [py]
    - name: body_fixed_relative_spherical_position_type # [py]
    - name: total_gravity_field_variation_acceleration_type # [py]
    - name: single_gravity_field_variation_acceleration_type # [py]
    - name: single_gravity_field_variation_acceleration_terms_type # [py]
    - name: acceleration_partial_wrt_body_translational_state_type # [py]
    - name: local_dynamic_pressure_type # [py]
    - name: euler_angles_to_body_fixed_type # [py]
    - name: current_body_mass_type # [py]
    - name: radiation_pressure_coefficient_type # [py]

  ######


classes:

  # base
  - name: VariableSettings
    short_summary: "Functional base class to define settings for variables."
    extended_summary: |
      This class is a functional base class for defining settings for variables.
      Any variable that requires additional information in addition to what can be provided here, should be defined by a
      dedicated derived class.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user because this is a base class." # [cpp]


  # derived (level 1)
  - name: SingleDependentVariableSaveSettings
    short_summary: "`VariableSettings`-derived class to define settings for dependent variables that are to be saved during propagation."
    extended_summary: |
      Functional base class for defining settings for dependent variables that are to be computed and saved during propagation.
      Any dependent variable that requires additional information in addition to what can be provided here, should be
      defined by a dedicated derived class.

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for dependent variables should be instantiated through factory functions of a derived class." # [cpp]


  # derived (level 2)
  - name: SingleAccelerationDependentVariableSaveSettings
    short_summary: "`SingleDependentVariableSaveSettings`-derived class to save a single acceleration (norm or vector) during propagation."
    extended_summary: "Class to define settings for saving a single acceleration (norm or vector) during propagation. Note: this acceleration is returned in the inertial frame!"

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for rotation models should be instantiated through the factory functions of a derived class." # [cpp]


functions:

  # factory functions:

  #- name: createDependentVariableSaveSettings # [cpp]
  #- name: create # [py]
    #short_summary: "Function to create settings for a generic dependent variable."
    #extended_summary: |
      #Function to create settings for a dependent variable. It creates objects that calculate dependent variables
      #from the objects that define their settings. It is usually not relevant nor useful for the user.

    #parameters:
      #- name: dependentVariables # [cpp]
        #type: std::vector<std::shared_ptr<SingleDependentVariableSaveSettings>> # [cpp]
      #- name: dependent_variable_list # [py]
        #type: list[SingleDependentVariableSaveSettings] # [py]
        #description: List of dependent variables to be saved.

      #- name: printDependentVariableTypes # [cpp]
        #type: bool, default=true # [cpp]
      #- name: print_variable_indices # [py]
        #type: bool, default=True # [py]
        #description: Whether the types of dependent variables to be saved should be printed on the terminal.

    #returns:
        #type: SingleDependentVariableSaveSettings
        #description: Dependent variable settings object.

  # Mach number
  - name: machNumberDependentVariable # [cpp]
  - name: mach_number # [py]
    short_summary: "Function to add the Mach number to the dependent variables to save."
    extended_summary: "Function to add the Mach number to the dependent variables to save.
    The calculation of the altitude uses the atmosphere model of the central body and the
    current state of the body for which the Mach number is to be calculated."

    examples: |

      To create settings for saving of a Mach number of a body name 'Spacecraft'
      w.r.t. the atmosphere of body 'Earth', use:

      .. code-block:: python
         :emphasize-lines: 18

         # Define save settings for Mach number
         propagation_setup.dependent_variable.mach_number( "Spacecraft", "Earth" )


    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose Mach number is to be saved.

      - name: bodyWithAtmosphere # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with atmosphere with respect to which the Mach number is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Altitude
  - name: altitudeDependentVariable # [cpp]
  - name: altitude # [py]
    short_summary: "Function to add the altitude to the dependent variables to save."
    extended_summary: "Function to add the altitude to the dependent variables to save.
    The calculation of the altitude uses the shape model of the central body and the
    current state of the body for which the altitude is to be calculated."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose Mach altitude is to be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the altitude is computed (requires this body to have a shape model defined).

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Airspeed
  - name: airspeedDependentVariable # [cpp]
  - name: airspeed # [py]
    short_summary: "Function to add the airspeed to the dependent variables to save."
    extended_summary: "Function to add the airspeed to the dependent variables to save.
    The calculation of the airspeed uses the rotation and wind models of the central body
    (to determine the motion of the atmosphere in inertial space), and the current state of the
    body for which the airspeed is to be calculated."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with atmosphere with respect to which the airspeed is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Body-fixed airspeed
  - name: bodyFixedAirspeedBasedVelocityVariable # [cpp]
  - name: body_fixed_airspeed_velocity # [py]
    short_summary: "Function to add the airspeed velocity vector to the dependent variables to save."
    extended_summary: "Function to add the airspeed velocity vector to the dependent variables to save.
    The airspeed velocity vector is *not provided in an inertial frame*, but instead a frame centered on,
    and fixed to, the central body. It defines the velocity vector of a body w.r.t. the relative atmosphere
    It requires the central body to have an atmosphere."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the airspeed is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Body-fixed groundspeed
  - name: bodyFixedGroundspeedBasedVelocityVariable # [cpp]
  - name: body_fixed_groundspeed_velocity # [py]
    short_summary: "Function to add the groundspeed velocity vector to the dependent variables to save."
    extended_summary: "Function to add the groundspeed velocity vector to the dependent variables to save.
    The groundspeed velocity vector is *not provided in an inertial frame*, but instead a frame centered on,
    and fixed to, the central body. It defines the velocity vector of a body w.r.t. 'the ground' or
    (alternatively and identically) the relative atmosphere in the case the atmosphere would be perfectly
    co-rotating with the central body."
    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the groundspeed is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.

  # Density
  - name: densityDependentVariable # [cpp]
  - name: density # [py]
    short_summary: "Function to add the local freestream density to the dependent variables to save."
    extended_summary: "Function to add the freestream density (at a body's position) to the dependent variables to save.
    The calculation of the density uses the atmosphere model of the central body,
    and the current state of the body for which the density is to be calculated."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyWithAtmosphere # [cpp]
        type: std::str # [cpp]
      - name: body_with_atmosphere # [py]
        type: str # [py]
        description: Body with atmosphere with respect to which the density is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Local temperature
  - name: localTemperatureDependentVariable # [cpp]
  - name: temperature # [py]
    short_summary: "Function to add the local freestream temperature to the dependent variables to save."
    extended_summary: "Function to add the freestream temperature (at a body's position) to the dependent variables to save.
    The calculation of the temperature uses the atmosphere model of the central body,
    and the current state of the body for which the temperature is to be calculated."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Local dynamic pressure
  - name: localDynamicPressureDependentVariable # [cpp]
  - name: dynamic_pressure # [py]
    short_summary: "Function to add the local freestream dynamic pressure to the dependent variables to save."
    extended_summary: "Function to add the freestream dynamic pressure (at a body's position) to the dependent variables to save.
    The calculation of the temperature uses the atmosphere model of the central body,
    and the current state of the body for which the temperature is to be calculated."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.

  # Total aerodynamic G-load
  - name: totalAerodynamicGLoadDependentVariable # [cpp]
  - name: local_aerodynamic_g_load # [py]
    short_summary: "Function to add the total aerodynamic G-load to the dependent variables to save."
    extended_summary: "Function to add the total aerodynamic G-load of a body to the dependent variables to save.
    The calculation uses the atmosphere model of the central body,
    and the current state of the body for which the temperature is to be calculated."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Relative position
  - name: relativePositionDependentVariable # [cpp]
  - name: relative_position # [py]
    short_summary: "Function to add the relative position vector to the dependent variables to save."
    extended_summary: "Function to add a body's relative position vector with respect to a second body
    to the dependent variables to save. The relative position is computed between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative position is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Relative distance
  - name: relativeDistanceDependentVariable # [cpp]
  - name: relative_distance # [py]
    short_summary: "Function to add the relative distance to the dependent variables to save."
    extended_summary: "Function to add a body's relative distance (norm of the position vector)
    with respect to a second body to the dependent variables to save. The relative distance is
    computed between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative distance is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Relative velocity
  - name: relativeVelocityDependentVariable # [cpp]
  - name: relative_velocity # [py]
    short_summary: "Function to add the relative velocity vector to the dependent variables to save."
    extended_summary: "Function to add a body's relative velocity vector with respect to a second body
    to the dependent variables to save. The relative velocity is computed between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative velocity is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.

  # Relative speed
  - name: relativeSpeedDependentVariable # [cpp]
  - name: relative_speed # [py]
    short_summary: "Function to add the relative speed to the dependent variables to save."
    extended_summary: "Function to add a body's relative speed (norm of the relative velocity vector)
    with respect to a second body to the dependent variables to save. The relative speed is computed
    between the bodies' centers of mass."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: relativeBody # [cpp]
        type: std::str # [cpp]
      - name: relative_body # [py]
        type: str # [py]
        description: Body with respect to which the relative speed is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.

  # Keplerian state
  - name: keplerianStateDependentVariable # [cpp]
  - name: keplerian_state # [py]
    short_summary: "Function to add the Keplerian state to the dependent variables to save."
    extended_summary: "Function to add the Keplerian state to the dependent variables to save.
    The Keplerian state is returned in this order: 1: Semi-major Axis. 2: Eccentricity. 3: Inclination.
    4: Argument of Periapsis. 5. Right Ascension of the Ascending Node. 6: True Anomaly."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the Keplerian state is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Modified equinoctial state
  - name: modifiedEquinoctialStateDependentVariable # [cpp]
  - name: modified_equinoctial_state # [py]
    short_summary: "Function to add the modified equinoctial state to the dependent variables to save."
    extended_summary: "Function to add the modified equinoctial state to the dependent variables to save.
    The value of the parameter I is automatically chosen as +1 or -1, depending on whether the inclination
    is smaller or larger than 90 degrees. The elements are returned in the order :math:`p`, :math:`f`, :math:`g`, :math:`h`, :math:`k`, :math:`L`"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the modified equinoctial state is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single acceleration
  - name: singleAccelerationDependentVariable # [cpp]
  - name: single_acceleration # [py]
    short_summary: "Function to add a single acceleration to the dependent variables to save."
    extended_summary: "Function to add a single acceleration vector to the dependent variables to save.
    The requested acceleration is defined by its type, and the bodies undergoing and exerting the acceleration.
    NOTE: When requesting a third-body perturbation be saved, you may use either the direct acceleration
    type, or the third body type. For instance, for saving a point-mass third-body perturbation,
    you may specify either ``point_mass_gravity_type`` or ``third_body_point_mass_gravity_type`` as acceleration type."

    examples: |

      To create settings for saving a point mass acceleration acting on body called 'Spacecraft',
      exerted by a body named 'Earth', use:

      .. code-block:: python
         :emphasize-lines: 18

         # Define save settings for point-mass acceleration on Spacecraft by Earth
         propagation_setup.dependent_variable.single_acceleration(
                 propagation_setup.acceleration.point_mass_gravity_type, 'Spacecraft', 'Earth' )

    parameters:
      - name: accelerationModelType # [cpp]
        type: AvailableAcceleration # [cpp]
      - name: acceleration_type # [py]
        type: AvailableAcceleration # [py]
        description: Acceleration type to be saved.

      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single acceleration norm
  - name: singleAccelerationNormDependentVariable # [cpp]
  - name: single_acceleration_norm # [py]
    short_summary: "Function to add a single scalar acceleration to the dependent variables to save."
    extended_summary: "Function to add a single scalar acceleration (norm of the acceleration vector)
    to the dependent variables to save. The requested acceleration is defined by its type, and the bodies
    undergoing and exerting the acceleration. NOTE: When requesting a third-body perturbation be saved, you may use either the direct acceleration
    type, or the third body type. For instance, for saving a point-mass third-body perturbation,
    you may specify either ``point_mass_gravity_type`` or ``third_body_point_mass_gravity_type`` as acceleration type."

    examples: |

      To create settings for saving norm of a point mass acceleration acting on body called 'Spacecraft',
      exerted by a body named 'Earth', use:

      .. code-block:: python
         :emphasize-lines: 18

         # Define save settings for point-mass acceleration on Spacecraft by Earth
         propagation_setup.dependent_variable.single_acceleration_norm(
                 propagation_setup.acceleration.point_mass_gravity_type, 'Spacecraft', 'Earth' )

    parameters:
      - name: accelerationModelType # [cpp]
        type: AvailableAcceleration # [cpp]
      - name: acceleration_type # [py]
        type: AvailableAcceleration # [py]
        description: Acceleration type to be saved

      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total scalar acceleration
  - name: totalAccelerationNormDependentVariable # [cpp]
  - name: total_acceleration_norm # [py]
    short_summary: "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save."
    #extended_summary: "Function to add the total scalar acceleration (norm of the vector) acting on a body to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total acceleration vector
  - name: totalAccelerationDependentVariable # [cpp]
  - name: total_acceleration # [py]
    short_summary: "Function to add the total acceleration vector acting on a body to the dependent variables to save."
    #extended_summary: "Function to add the total acceleration vector acting on a body to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single torque norm
  - name: singleTorqueNormVariable # [cpp]
  - name: single_torque_norm # [py]
    short_summary: "Function to add a single torque (norm of the torque vector) to the dependent variables to save."
    #extended_summary: "Function to add a single torque (norm of the torque vector) to the dependent variables to save."

    parameters:
      - name: torqueModelType # [cpp]
        type: AvailableTorque # [cpp]
      - name: torque_type # [py]
        type: AvailableTorque # [py]
        description: Torque type to be saved.

      - name: bodyUndergoingTorque # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_torque # [py]
        type: str # [py]
        description: Body undergoing torque.

      - name: bodyExertingTorque # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_torque # [py]
        type: str # [py]
        description: Body exerting torque.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single torque
  - name: singleTorqueVariable # [cpp]
  - name: single_torque # [py]
    short_summary: "Function to add a single torque vector to the dependent variables to save."
    #extended_summary: "Function to add a single torque vector to the dependent variables to save."

    parameters:
      - name: torqueModelType # [cpp]
        type: AvailableTorque # [cpp]
      - name: torque_type # [py]
        type: AvailableTorque # [py]
        description: Torque type to be saved.

      - name: bodyUndergoingTorque # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_torque # [py]
        type: str # [py]
        description: Body undergoing torque.

      - name: bodyExertingTorque # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_torque # [py]
        type: str # [py]
        description: Body exerting torque.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total torque norm
  - name: totalTorqueNormDependentVariable # [cpp]
  - name: total_torque_norm # [py]
    short_summary: "Function to add the total torque (norm of the torque vector) to the dependent variables to save."
    #extended_summary: "Function to add the total torque (norm of the torque vector) to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total torque
  - name: totalTorqueDependentVariable # [cpp]
  - name: total_torque # [py]
    short_summary: "Function to add the total torque vector to the dependent variables to save."
    #extended_summary: "Function to add the total torque vector to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


    # Single spherical harmonic vector term
  - name: sphericalHarmonicAccelerationTermsDependentVariable # [cpp]
  - name: spherical_harmonic_terms_acceleration # [py]
    short_summary: "Function to add single degree/order contributions of a spherical harmonic acceleration vector to the dependent variables to save."
    extended_summary: "Function to add single degree/order contributions of a spherical harmonic acceleration vector
    to the dependent variables to save. The spherical harmonic acceleration consists of a (truncated) summation
    of contributions at degree :math:`l` and order :math:`m`. Using this function, you can save the contributions
    of separate :math:`l,m` entries to the total acceleration. For instance, when requesting dependent variables
    for :math:`l,m=2,2`, the contribution due to the combined influence of :math:`\bar{C}_{22}` and `\bar{S}_{22}` are provided "


    examples: |

      To create settings for saving spherical harmonic acceleration contributions of degree/order
      2/0, 2/1 and 2/2, acting on a body names 'Spacecraft', exerted by a body named 'Earth',
      use the following for the acceleration. The resulting dependent variable will contain
      nine entries (three acceleration components for 2/0, 2/1 and 2/2, respectively).

      .. code-block:: python
         :emphasize-lines: 18

         # Define degree/order combinations for which to save acceleration contributions
         spherical_harmonic_terms = [ (2,0), (2,1), (2,2) ]

         # Define save settings for separate spherical harmonic contributions
         propagation_setup.dependent_variable.spherical_harmonic_terms_acceleration( "Spacecraft", "Earth", spherical_harmonic_terms )

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

      - name: componentIndices # [cpp]
        type: std::vector<std::pair> # [cpp]
      - name: component_indices # [py]
        type: list[tuple] # [py]
        description: Tuples of (degree, order) indicating the terms to save.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single spherical harmonic scalar term
  - name: sphericalHarmonicAccelerationTermsNormDependentVariable # [cpp]
  - name: spherical_harmonic_terms_acceleration_norm # [py]
    short_summary: "Function to add a single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save."
    extended_summary: "Function to add single term of the spherical harmonic acceleration (norm of the vector) to the dependent variables to save."

    examples: |

      To create settings for saving spherical harmonic acceleration contributions of degree/order
      2/0, 2/1 and 2/2, acting on a body names 'Spacecraft', exerted by a body named 'Earth',
      use the following for the acceleration. The resulting dependent variable will contain
      three entries (one acceleration norm for 2/0, 2/1 and 2/2, respectively).

      .. code-block:: python
         :emphasize-lines: 18


         # Define degree/order combinations for which to save acceleration contributions
         spherical_harmonic_terms = [ (2,0), (2,1), (2,2) ]

         # Define save settings for separate spherical harmonic contributions
         propagation_setup.dependent_variable.spherical_harmonic_terms_acceleration_norm( "Spacecraft", "Earth", spherical_harmonic_terms )

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body undergoing acceleration.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting acceleration.

      - name: componentIndices # [cpp]
        type: std::vector<std::pair> # [cpp]
      - name: component_indices # [py]
        type: list[tuple] # [py]
        description: Tuples of (degree, order) indicating the terms to save.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Aerodynamic force coefficients
  - name: aerodynamicForceCoefficientDependentVariable # [cpp]
  - name: aerodynamic_force_coefficients # [py]
    short_summary: "Function to add the aerodynamic force coefficients to the dependent variables to save."
    extended_summary: "Function to add the aerodynamic force coefficients to the dependent variables to save.
    It requires an aerodynamic coefficient interface to be defined for the vehicle. The coefficients are returned
    in the following order: C_D, C_S, C_l (if coefficient interface defined in aerodynamic frame), or C_X, C_Y, C_Z
    (if coefficient interface defined in body frame)."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Aerodynamic moment coefficients
  - name: aerodynamicMomentCoefficientDependentVariable # [cpp]
  - name: aerodynamic_moment_coefficients # [py]
    short_summary: "Function to add the aerodynamic moment coefficients to the dependent variables to save."
    extended_summary: "Function to add the aerodynamic force coefficients to the dependent variables to save.
    It requires an aerodynamic coefficient interface to be defined for the vehicle.
    The coefficients are returned in the following order: C_l, C_m, C_n ,
    respectively about the X, Y, Z axes of the body-fixed frame, see (see Mooij, 1994 [1]_)"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body undergoing acceleration.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Latitude
  - name: latitudeDependentVariable # [cpp]
  - name: latitude # [py]
    short_summary: "Function to add the latitude to the dependent variables to save."
    extended_summary: "Function to add the latitude of a body, in the body-fixed frame
    of a central body, to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the latitude is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Geodetic latitude
  - name: geodeticLatitudeDependentVariable # [cpp]
  - name: geodetic_latitude # [py]
    short_summary: "Function to add the geodetic latitude to the dependent variables to save."
    extended_summary: "Function to add the geodetic latitude, in the body-fixed frame
    of a central body, to the dependent variables to save. If the central body has a spherical
    shape model, this value is identical to the latitude. If the central body has an
    oblate spheroid shape model, the calculation of the geodetic latitude uses the flattening
    of the this shape model to determine the geodetic latitude"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the geodetic latitude is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Longitude
  - name: longitudeDependentVariable # [cpp]
  - name: longitude # [py]
    short_summary: "Function to add the longitude to the dependent variables to save."
    extended_summary: "Function to add the longitude of a body, in the body-fixed frame
    of a central body, to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the longitude is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Heading angle
  - name: headingDependentVariable # [cpp]
  - name: heading_angle # [py]
    short_summary: "Function to add the heading angle to the dependent variables to save."
    extended_summary: "Function to add the heading angle to the dependent variables to save, as defined by Mooij, 1994 [1]_ ."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the heading angle is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Flight path angle
  - name: flightPathAngleDependentVariable # [cpp]
  - name: flight_path_angle # [py]
    short_summary: "Function to add the flight path angle to the dependent variables to save."
    extended_summary: "Function to add the flight path angle to the dependent variables to save, as defined by Mooij, 1994 [1]_ ."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the flight path angle is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Angle of attack
  - name: angleOfAttackDependentVariable # [cpp]
  - name: angle_of_attack # [py]
    short_summary: "Function to add the angle of attack to the dependent variables to save."
    extended_summary: "Function to add the angle of attack angle to the dependent variables to save, as defined by Mooij, 1994 [1]_ ."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the angle of attack is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Sideslip angle
  - name: sideslipAngleDependentVariable # [cpp]
  - name: sideslip_angle # [py]
    short_summary: "Function to add the sideslip angle to the dependent variables to save, as defined by Mooij, 1994 [1]_ ."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the sideslip angle is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Bank angle
  - name: bankAngleDependentVariable # [cpp]
  - name: bank_angle # [py]
    short_summary: "Function to add the bank angle to the dependent variables to save, as defined by Mooij, 1994 [1]_ ."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the bank angle is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Radiation pressure
  - name: radiationPressureDependentVariable # [cpp]
  - name: radiation_pressure # [py]
    short_summary: "Function to add the radiation pressure to the dependent variables to save."
    extended_summary: "Function to add the local radiation pressure, in N/m^2, to the dependent
    variables to save. It requires a 'source power' to be defined for the radiating body."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: radiatingBody # [cpp]
        type: std::str # [cpp]
      - name: radiating_body # [py]
        type: str # [py]
        description: Radiating body.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Total gravity field variation acceleration
  - name: totalGravityFieldVariationAccelerationContributionVariable # [cpp]
  - name: total_gravity_field_variation_acceleration # [py]
    short_summary: "Function to add the acceleration induced by the total time-variability of a gravity field to the dependent variables to save."
    extended_summary: "Function to add the acceleration induced by the total time-variability of a gravity field to the dependent variables to save.
    This function does not distinguish between different sources of variations of the gravity field, and takes the
    full time-variation when computing the contribution to the acceleration. To select only one
    contribution, use the :func:`single_gravity_field_variation_acceleration` function."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting the acceleration.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single gravity field variation acceleration
  - name: singleGravityFieldVariationAccelerationContributionVariable # [cpp]
  - name: single_gravity_field_variation_acceleration # [py]
    short_summary: "Function to add the acceleration induced by a single time-variability of a gravity field to the dependent variables to save."
    extended_summary: "Function to add the acceleration induced by a single time-variability of a gravity field to the dependent variables to save.
    The user specifies the type of variability for which the induced acceleration is to be saved."

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting the acceleration.

      - name: deformationType # [cpp]
        type: BodyDeformationTypes # [cpp]
      - name: deformation_type # [py]
        type: BodyDeformationTypes # [py]
        description: Type of gravity field variation for which the acceleration contribution is to be saved

      - name: identifier # [cpp]
        type: std::str, default="" # [cpp]
      - name: identifier # [py]
        type: str, default="" # [py]
        description: Identifier for the deformation type. To be used in case multiple realizations of a single variation type are present in the given body. Otherwise, this entry can be left empty

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Single, per-term gravity field variation acceleration
  - name: singleGravityFieldVariationSeparateTermsAccelerationContributionVariable # [cpp]
  - name: single_per_term_gravity_field_variation_acceleration # [py]
    short_summary: "Function to add the acceleration induced by a single time-variability of a gravity field, at a given list of degrees/orders, to the dependent variables to save."
    short_summary: "Function to add the acceleration induced by a single time-variability of a gravity field, at a given list of degrees/orders, to the dependent variables to save.
    This combines the functionality of the :func:`single_gravity_field_variation_acceleration` and :func:`spherical_harmonic_terms_acceleration` variables"

    parameters:
      - name: bodyUndergoingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_undergoing_acceleration # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: bodyExertingAcceleration # [cpp]
        type: std::str # [cpp]
      - name: body_exerting_acceleration # [py]
        type: str # [py]
        description: Body exerting the acceleration.

      - name: componentIndices # [cpp]
        type: std::vector<std::pair> # [cpp]
      - name: component_indices # [py]
        type: list[tuple] # [py]
        description: Tuples of (degree, order) indicating the terms to save.


      - name: deformationType # [cpp]
        type: BodyDeformationTypes # [cpp]
      - name: deformation_type # [py]
        type: BodyDeformationTypes # [py]
        description: Type of gravity field variation for which the acceleration contribution is to be saved

      - name: identifier # [cpp]
        type: std::str, default="" # [cpp]
      - name: identifier # [py]
        type: str, default="" # [py]
        description: Identifier for the deformation type. To be used in case multiple realizations of a single variation type are present in the given body. Otherwise, this entry can be left empty

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.




  # Rotation matrix: from inertial to body-fixed
  - name: inertialToBodyFixedRotationMatrixVariable # [cpp]
  - name: inertial_to_body_fixed_rotation_frame # [py]
    short_summary: "Function to add the rotation matrix from inertial to body-fixed frame to the dependent variables to save."
    extended_summary: "Function to add the rotation matrix from inertial to body-fixed frame to the dependent variables to save.
    This requires the rotation of the body to be defined (either in the environment or the state vector). NOTE: a rotation matrix
    is returned as a nine-entry vector in the dependent variable output, where entry :math:`(i,j)` of the matrix is stored in
    entry :math:`(3i+j)` of the vector (with :math:`i,j=0,1,2`),"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body for which the rotation matrix is to be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  - name: tnwToInertialFrameRotationMatrixVariable # [cpp]
  - name: tnw_to_inertial_rotation_matrix # [py]
    short_summary: "Function to add the rotation matrix from the TNW to the inertial frame to the dependent variables to save."
    extended_summary: "Function to add the rotation matrix from the TNW to the inertial frame to the dependent variables to save.
    It has the x-axis pointing along the velocity vector, the z-axis along the orbital angular momentum vector, and the y-axis
    completing the right-handed system. NOTE: a rotation matrix is returned as a nine-entry vector in the dependent variable output, where entry :math:`(i,j)` of the matrix is stored in
    entry :math:`(3i+j)` of the vector (with :math:`i,j=0,1,2`),"


    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body for which the rotation matrix is to be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the TNW frame is determined.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.

  - name: rswToInertialFrameRotationMatrixVariable # [cpp]
  - name: rsw_to_inertial_rotation_matrix # [py]
    short_summary: "Function to add the rotation matrix from the RSW to the inertial frame to the dependent variables to save."
    extended_summary: "Function to add the rotation matrix from the RSW to the inertial frame to the dependent variables to save.
    It has the x-axis pointing along the position vector (away from the central body), the z-axis along the orbital angular
    momentum vector, and the y-axis completing the right-handed system. NOTE: a rotation matrix is returned as a nine-entry
    vector in the dependent variable output, where entry :math:`(i,j)` of the matrix is stored in entry :math:`(3i+j)` of the
    vector (with :math:`i,j=0,1,2`),"


    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body for which the rotation matrix is to be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the TNW frame is determined.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Rotation matrix: inertial to body-fixed (through 313 euler angles)
  - name: eulerAnglesToBodyFixed313Variable # [cpp]
  - name: inertial_to_body_fixed_313_euler_angles # [py]
    short_summary: "Function to add the 3-1-3 Euler angles for the rotation from inertial to body-fixed frame to the dependent variables to save."
    extended_summary: "Function to add the 3-1-3 Euler angles for the rotation from inertial to body-fixed frame to the dependent variables to save.
    This requires the rotation of the body to be defined (either in the environment or the state vector)."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body for which the rotation angles are to be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Rotation matrix: rotation between given aerodynamic RF
  - name: intermediateAerodynamicRotationMatrixVariable # [cpp]
  - name: intermediate_aerodynamic_rotation_matrix_variable # [py]
    short_summary: "Function to add the rotation matrix between any two reference frames used in aerodynamic calculations."
    extended_summary: "Function to add the rotation matrix between any two reference frames used in aerodynamic calculations. The
    list of available frames is defined by the :class:`AerodynamicsReferenceFrames` enum. NOTE: a rotation matrix is returned as a
    nine-entry vector in the dependent variable output, where entry :math:`(i,j)` of the matrix is stored in entry :math:`(3i+j)`
    of the vector (with :math:`i,j=0,1,2`),"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: baseFrame # [cpp]
        type: AerodynamicsReferenceFrames # [cpp]
      - name: base_frame # [py]
        type: AerodynamicsReferenceFrames # [py]
        description: Base reference frame for the rotation.

      - name: targetFrame # [cpp]
        type: AerodynamicsReferenceFrames # [cpp]
      - name: target_frame # [py]
        type: AerodynamicsReferenceFrames # [py]
        description: Target reference frame for the rotation.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Altitude of periapsis
  - name: periapsisAltitudeVariable # [cpp]
  - name: periapsis_altitude # [py]
    short_summary: "Function to add the altitude of periapsis to the dependent variables to save."
    extended_summary: "Function to add the periapsis altitude of the current osculating orbit to the dependent variables to save.
    The altitude depends on the shape of the central body. This function takes the current (osculating) orbit of the body w.r.t.
    the central body, and uses this Kepler orbit to extract the position/altitude of periapsis."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the altitude of periapsis is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  ## Control surface deflection
  #- name: controlSurfaceDeflectionDependentVariable # [cpp]
  #- name: control_surface_deflection # [py]
    #short_summary: "Function to add the altitude of periapsis to the dependent variables to save."

    #parameters:
      #- name: associatedBody # [cpp]
        #type: std::str # [cpp]
      #- name: body # [py]
        #type: str # [py]
        #description: Body whose dependent variable should be saved.

      #- name: controlSurface # [cpp]
        #type: std::str # [cpp]
      #- name: control_surface # [py]
        #type: str # [py]
        #description: Control surface whose deflection should be saved.

    #returns:
        #type: SingleDependentVariableSaveSettings
        #description: Dependent variable settings object.


  # Spherical position wrt to a central body
  - name: centralBodyFixedSphericalPositionVariable # [cpp]
  - name: central_body_fixed_spherical_position # [py]
    short_summary: "Function to add the spherical, body-fixed position to the dependent variables to save."
    extended_summary: "Function to add the spherical position to the dependent variables to save.
    The spherical position is return as the radius, latitude, longitude, defined in the body-fixed frame of the
    central body"

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose spherical position is to be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the spherical, body-fixed is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Cartesian position wrt to a central body
  - name: centralBodyFixedCartesianPositionVariable # [cpp]
  - name: central_body_fixed_cartesian_position # [py]
    short_summary: "Function to add the relative Cartesian position, in the central body's fixed frame, to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose relative cartesian position is to be saved.

      - name: centralBody # [cpp]
        type: std::str # [cpp]
      - name: central_body # [py]
        type: str # [py]
        description: Body with respect to which the cartesian, body-fixed is computed.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.

  # Body mass
  - name: bodyMassVariable # [cpp]
  - name: body_mass # [py]
    short_summary: "Function to add the current body mass to the dependent variables to save."
    #extended_summary: "Function to add the body mass to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose mass should be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.


  # Radiation pressure coefficient
  - name: radiationPressureCoefficientVariable # [cpp]
  - name: radiation_pressure_coefficient # [py]
    short_summary: "Function to add the current radiation pressure coefficient to the dependent variables to save."
    #extended_summary: "Function to add the radiation pressure coefficient to the dependent variables to save."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose dependent variable should be saved.

      - name: emittingBody # [cpp]
        type: std::str # [cpp]
      - name: emitting_body # [py]
        type: str # [py]
        description: Emitting body.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.



  ## Stagnation point heat flux
  #- name: stagnationPointHeatFluxDependentVariable # [cpp]
  #- name: stagnation_point_heat_flux # [py]
    #short_summary: "Function to add the heat flux at the stagnation point to the dependent variables to save."
    #extended_summary: "Function to add the heat flux induced by atmospheric friction at the stagnation point to the dependent variables to save. It requires an aerodynamic acceleration to be acting on the body and a vehicle nose radius to be defined."

    #parameters:
      #- name: associatedBody # [cpp]
        #type: std::str # [cpp]
      #- name: body # [py]
        #type: str # [py]
        #description: Body whose dependent variable should be saved.

    #returns:
        #type: SingleDependentVariableSaveSettings
        #description: Dependent variable settings object.


  # Total mass rate
  - name: totalMassRateDependentVariable # [cpp]
  - name: total_mass_rate # [py]
    short_summary: "Function to add the total mass rate to the dependent variables to save."
    extended_summary: "Function to add the total mass rate to the dependent variables to save. It requires the body mass to be numerically propagated."

    parameters:
      - name: associatedBody # [cpp]
        type: std::str # [cpp]
      - name: body # [py]
        type: str # [py]
        description: Body whose mass rate should be saved.

    returns:
        type: SingleDependentVariableSaveSettings
        description: Dependent variable settings object.







