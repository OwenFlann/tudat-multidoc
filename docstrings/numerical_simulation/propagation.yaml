summary : "Functionalities and utilities of propagation objects."

extended_summary: |
  This module provides functionalities for propagation settings
  objects. It also contains some utility functions that extract specific quantities from propagation settings and body
  objects. Note that the classes in this module are rarely created manually, 
  but are instead created by the functionality in the :ref:`\`\`propagation_setup\`\``  module. 

enums:
  - name: PropagationTerminationReason
    short_summary: "Enumeration of types of termination of propagation."

    members:
      - name: propagation_never_run
      - name: unknown_reason
      - name: termination_condition_reached
      - name: runtime_error_caught_in_propagation
      - name: nan_or_inf_detected_in_state

classes:

  - name: SimulationResults
    extended_summary: "Base class for objects that store all results of a numerical propagation."
    extended_summary: |
       Base class for objects that store all results of a numerical propagation. Derived class are implemented for single-, multi- and hybrid-arc propagation of botj dynamics and variational equations
       
  - name: SingleArcSimulationResults
    short_summary: |
       Class that stores all the results (including logging data) of a single-arc propagation

    properties: # [py]
      - name: equationsOfMotionNumericalSolution_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the
          numerically calculated state at this epoch. For this function, the states are always converted to so-called
          'processed' formulations (e.g. Cartesian states for translational dynamics), see `here <https://docs.tudat.space/en/latest/_src_user_guide/state_propagation/propagation_setup/processed_propagated_elements.html>`_
          for details. For the history of the states that were actually propagated, use the ``unprocessed_state_history``.

          .. note:: The propagated state at each epoch contains the state types in the following order: Translational ( **T** ), Rotational ( **R** ), Mass ( **M** ), and Custom ( **C** ).
                    When propagating two bodies, an example of what the output state would look like is for instance:
                    [ **T** Body 1, **T** Body 2, **R** Body 1, **R** Body 2, **M** Body 1, **M** Body 2 ] The specifics can be retrieved using the :attr:`state_ids` attribute of this class

          .. note:: For propagation of translational dynamics using cowell
                    propagator, the conventional and propagated
                    coordinates are identical.

      - name: equationsOfMotionNumericalSolutionRaw_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: unprocessed_state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Numerical solution of the equations of motion as key-value pairs, without any processing applied. The key denotes the epoch. The value contains the
          numerically calculated state at this epoch. This attribute contains the states of the propagated bodies expressed in the
          "raw" form in which the propagation took place. For instance, when using a Gauss-Kepler propagation scheme, this
          attribute will contain the numerically propagated Keplerian elements at each time epoch

      - name: dependentVariableHistory_ # [cpp]
        type: std::map<double, Eigen::Vector> # [cpp]
      - name: dependent_variable_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Dependent variables computed during the propagation as key-value pairs.
          The vector of all dependent variables concatenated into a single vector as value, with the epoch as key.
          They order of the concatenated dependent variables in a single value is provided by the ``dependent_variable_ids`` attribute of this object. 


      - name: cumulativeComputationTimeHistory_ # [cpp]
        type: std::map<double, double> # [cpp]
      - name: cumulative_computation_time_history # [py]
        type: dict[float, float] # [py]
        readonly: Yes
        description: |
          History of cumulative computation time in seconds needed during the propagation as key-value
          pairs. At each epoch (key) the computation time (value) in seconds is the total computation time
          used up to and including that time step. This includes the total time up to and including the current time step,
          since the beginning of the (single-arc) propagation.

      - name: cumulativeNumberOfFunctionEvaluations_ # [cpp]
        type: std::map<double, int> # [cpp]
      - name: cumulative_number_of_function_evaluations # [py]
        type: dict[float, int] # [py]
        readonly: Yes
        description: |
          This function returns the history of cumulative number of function evaluations taken during the propagation as key-value
          pairs. At each epoch (key), the total number of computed function evaluations (value) are given up to and including that time step.
          This includes all function evaluations up to and including the current time step, since the beginning of the (single-arc) propagation.

      - name: termination_details # [py]
        type: PropagationTerminationDetails
        readonly: Yes
        description: |
          Object describing the details of the event that triggered the termination of the last propagation.

      - name: dependent_variable_ids # [py]
        type: dict[[int,int], str] # [py]
        readonly: Yes
        description: |
          Key-value container with the starting entry of the dependent variables saved (key), along with associated ID (value).

      - name: state_ids # [py]
        type: dict[[int,int] str] # [py]
        readonly: Yes
        description: |
          Key-value container with the starting entry of the states (key), along with associated ID (value).

      - name: integration_completed_successfully # [py]
        type: bool # [py]
        readonly: Yes
        description: |  # [py]
          Boolean defining whether the last propagation was finished
          successfully, as defined by the termination conditions, or if
          it was terminated prematurely (for instance due to an
          exception, or an Inf/NaN state entry being detected).

  - name: PropagationTerminationDetails
    short_summary: |
       Object that provides information on the reason for the
       termination of the propagation.

    properties: # [py]
      - name: termination_reason # [py]
        type: PropagationTerminationReason # [py]
        description: | # [py]
          Enum defining the reason the propagation was terminated

      - name: terminated_on_exact_condition # [py]
        type: bool # [py]
        description: | # [py]
          Boolean defining whether the propagation was terminated on an *exact* final condition,
          or once the propagation went *past* the determined final condition. The choice of behaviour is
          defined by the termination settings provided as input to the Simulator object. This variable only
          has a meaningful definition if the ``termination_reason`` has value ``termination_condition_reached``

functions:


  - name: getInitialStatesOfBodies # [cpp]
  - name: get_state_of_bodies # [py]
    short_summary: "Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time."

    extended_summary: |
      Function to get the states of a set of bodies, with respect to some set of central bodies, at the requested time.

    parameters:
      - name: bodiesToIntegrate # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: bodies_to_propagate # [py]
        type: list[str] # [py]
        description: List of bodies to be propagated.

      - name: centralBodies # [cpp]
        type: std::vector<std::string> # [cpp]
      - name: central_bodies # [py]
        type: list[str] # [py]
        description: List of central bodies, each referred to a body being propagated (in the same order).

      - name: bodies # [cpp]
        type: SystemOfBodies # [cpp]
      - name: bodies_to_propagate # [py]
        type: body_system # [py]
        description: System of bodies used in the propagation.

      - name: initialTime # [cpp]
        type: double # [cpp]
      - name: initial_time # [py]
        type: float # [py]
        description: Initial time of the propagation.

    returns:
        type: Eigen::Matrix # [cpp]
        type: numpy.ndarray # [py]
        description: Time at which the states should be retrieved.


  # Free function
  - name: createCombinedInitialState # [cpp]
  - name: combine_initial_states # [py]
    short_summary: "Function to retrieve the initial state for a list of propagator settings."
    extended_summary: |
      Function to retrieve the initial state for a list of propagator settings. This way, the initial state for
      different quantities to be propagated (e.g., translational state, rotational state, mass) are retrieved and
      organized in a single container.

    parameters:
      - name: propagatorSettingsList # [cpp]
        type: map # [cpp]
      - name: propagator_settings_per_type # [py]
        type: dict # [py]
        description: Propagator settings where the type of propagation is reported as key and the respective list of propagator settings as value.

    returns:
        type: Eigen::Matrix # [cpp]
        type: numpy.ndarray # [py]
        description: Vector of initial states, sorted in order of IntegratedStateType, and then in the order of the vector of SingleArcPropagatorSettings of given type.



      
