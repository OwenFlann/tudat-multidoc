summary : "Setup and execution of numerical simulations."

extended_summary: |
  This module contains everything related to the setup of a numerical simulation, including submodules to define
  environment, propagation, and integration settings. It also contains objects that perform the simulation using such
  settings.

modules:
  - estimation_setup
  - environment_setup
  - propagation_setup
  - estimation
  - environment
  - propagation

classes:

  #####    SIMPLE SIMULATOR    #####

  - name: SingleArcSimulator # [py]
  - name: SingleArcSimulator # [cpp]
    short_summary: "Class for consolidating single arc dynamics simulation functionality."
    extended_summary: |
      Class for consolidating all functionality required to perform single arc dynamics simulations.
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
        special_members: __init__
    properties:
      - name: equationsOfMotionNumericalSolution_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the
          numerically calculated state at this epoch. For this function, the states are always converted to so-called
          'conventional' formulations (e.g. Cartesian states for translational dynamics), see `here <https://tudat-space.readthedocs.io/en/latest/_src_api/propagation_setup/settings/conventional_vs_propagated_coordinates.html>`_
          for detailed. For the history of the states that were actually propagated, use the ``unprocessed_state_history``.

          .. note:: For propagation of translational dynamics using cowell
                    propagator, the conventional and propagated
                    coordinates are identical.

      - name: equationsOfMotionNumericalSolutionRaw_ # [cpp]
        type: std::map<double, Eigen::Matrix> # [cpp]
      - name: unprocessed_state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Raw numerical solution of the equations of motion as key-value pairs. The key denotes the epoch. The value contains the
          numerically calculated state at this epoch. This attribute contains the states of the propagated bodies expressed in the
          "raw" form in which the propagation took place. For instance, when using a Gauss-Kepler propagation scheme, this
          attribute will contain the numerically propagated Keplerian elements at each time epoch

      - name: dependentVariableHistory_ # [cpp]
        type: std::map<double, Eigen::Vector> # [cpp]
      - name: dependent_variable_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Dependent variables computed during the propagation as key-value pairs.
          They are returned in the order with the same order of the DependentVariableSaveSettings object as values,
          as value, with the epoch as key.

      - name: cumulativeComputationTimeHistory_ # [cpp]
        type: std::map<double, double> # [cpp]
      - name: cumulative_computation_time_history # [py]
        type: dict[float, float] # [py]
        readonly: Yes
        description: |
          History of cumulative computation time in seconds needed during the propagation as key-value
          pairs. At each epoch (key) the computation time (value) in seconds is the total computation time
          used up to and including that time step.

      - name: cumulativeNumberOfFunctionEvaluations_ # [cpp]
        type: std::map<double, int> # [cpp]
      - name: cumulative_number_of_function_evaluations # [py]
        type: dict[float, int] # [py]
        readonly: Yes
        description: |
          This function returns the history of cumulative number of function evaluations taken during the propagation as key-value
          pairs. At each epoch (key), the number of computed function evaluations (value) are given up to and including that time step.


      #- name: state_history_base # [py]
        #type: numpy.ndarray[Dict[float, numpy.ndarray]] # [py]
        #description: |
          #Numerical solution of the equations of motion as a vector of key-value containers. This consists of the state history
          #of the propagated bodies expressed in cartesian coordinates (X, Y, Z, Vx, Vy, Vz) in the base reference frame
          #as value, with the epoch as key. This function is similar to the corresponding function without "base", with
          #different return types.

      #- name: getDependentVariableHistoryBase # [cpp]
        #type: numpy.ndarray[Dict[float, numpy.ndarray]] # [py]
        #description: |
          #This function returns the dependent variables computed during the propagation as a vector of key-value containers.
          #They are returned in the order with the same order of the DependentVariableSaveSettings object as values,
          #as value, with the epoch as key. This function is similar to the corresponding function without "base", with
          #different return types.

      #- name: getCumulativeComputationTimeHistoryBase # [cpp]
        #type: numpy.ndarray[Dict[float, numpy.ndarray]] # [py]
        #description: |
          #This function returns the history of cumulative computation time needed during the propagation as a vector of key-value containers.
          #This means that at each time step the computation time is the sum of the computation time needed for that particular
          #time step and the computation time needed for all the previous time steps. The computation time is returned
          #as value, with time as key. This function is similar to the corresponding function without "base", with
          #different return types.

      - name: integrator_settings # [py]
        type: IntegratorSettings  # [py]
        description: |
          Settings to create the numerical integrator that is to be used
          for the integration of the equations of motion

      - name: stateDerivativeFunction_ # [cpp]
        type: std::function<Eigen::Matrix>(double, Eigen::Matrix) # [cpp]
      - name: state_derivative_function # [py]
        type: Callable[[float, numpy.ndarray], numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Function that performs a single state derivative function evaluation. This function takes the numerically propagated
          state, and current independent variable (time) as input, and returns the derivative of the state that is then used
          by the numerical integration routine. Typically, this function is NOT used directly by users.


      #- name: doubleStateDerivativeFunction_ # [cpp]
        #type: std::function<Eigen::Matrix>(double, Eigen::Matrix) # [cpp]
      #- name: double_state_derivative_function # [py]
        #type: Callable[[float, numpy.ndarray], numpy.ndarray] # [py]
        #description: |
          #Function that performs a single state derivative function evaluation with double precision.

      - name: environmentUpdater_ # [cpp]
      - name: environment_updater # [py]
        type: EnvironmentUpdater
        readonly: Yes
        description: |
          # Object used in the propagation to update the environment, it uses the current time and numerically calculated state
          to update the translational state, rotational state, flight conditions, etc. of all bodies in the simulation to be
          consistent with this time and state.  Typically, this class is NOT used directly by users.

      #- name: propagationTerminationCondition_ # [cpp]
      #- name: propagation_termination_condition # [py]
        #type: PropagationTerminationCondition
        #description: |
          #Object used in the propagation to define when the propagation should stop.

      #- name: integratedStateProcessors_ # [cpp]
        #type: std::map<IntegratedStateType, std::vector<IntegratedStateProcessor>> # [cpp]
      #- name: integrated_state_processors # [py]
        #type: Dict[float, List[IntegratedStateProcessor]] # [py]
        #description: |
          #List of object (per dynamics type) that process the integrated numerical solution by updating the environment.

      - name: propagationTerminationReason_ # [cpp]
      - name: propagation_termination_details # [py]
        type: PropagationTerminationDetails
        readonly: Yes
        description: |
          Object describing the details of the event that triggered the termination of the last propagation.

      #- name: integratedStateProcessors_ # [cpp]
        #type: bool # [cpp]
      #- name: integrated_state_processors # [py]
        #type: bool # [py]
        #description: |
          #Whether the integration was completed successfully.

      - name: dependentVariableIds_ # [cpp]
        type: std::map< int, std::string > # [cpp]
      - name: dependent_variable_ids # [py]
        type: dict[int, str] # [py]
        readonly: Yes
        description: |
          Key-value container with the starting entry of the dependent variables saved (key), along with associated ID (value).

      - name: integration_completed_successfully # [py]
        type: bool # [py]
        readonly: Yes
        description: |  # [py]
          Boolean defining whether the last propagation was finished
          successfully, as defined by the termination conditions, or if
          it was terminated prematurely (for instance due to an
          exception, or an Inf/NaN state entry being detected).


      #- name: initialPropagationTime_ # [cpp]
        #type: double # [cpp]
      #- name: initial_propagation_time # [py]
        #type: float # [py]
        #description: |
          #Initial time of the propagation.

      #- name: dependentVariablesFunctions_ # [cpp]
        #type: std::function<Eigen::Vector> # [cpp]
      #- name: dependent_variables_functions # [py]
        #type: list[numpy.ndarray] # [py]
        #description: |
          #List of functions that compute the dependent variables at each time step.


    methods:
      - name: ctor
        short_summary: "Class constructor."
        extended_summary: |
          Defines environment, propagation and
          integrations models, as well as a number of settings related
          to simulation output and processing.

          .. note:: When using default settings, creating an object of
                    this type automatically triggers the propagation

        parameters:
          - name: bodies
            type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies`
            description: |
              Object defining the physical environment, with all
              properties of artificial and natural bodies.

          - name: integrator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.integrator.IntegratorSettings`  # [py]
            description: |            # [py]
              Settings to create the numerical integrator that is to be
              used for the integration of the equations of motion

          - name: propagator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.propagator.PropagatorSettings`  # [py]
            description: |            # [py]
              Settings to create the propagator that is to be
              used for the propagation of dynamics

          - name: are_equations_of_motion_to_be_integrated # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether the propagation should be
              performed immediately (default), or at a later time when
              calling the :py:attr:`~integrate_equations_of_motion`
              function.

          - name: clear_numerical_solutions # [py]
            type: Bool, default = False # [py]
            description: |    # [py]
              Boolean defining whether the propagation results should be
              deleted after the propagation is terminated. If this is
              done, the :py:attr:`~state_history`,
              :py:attr:`~unprocessed_state_history` and
              :py:attr:`~dependent_variable_history` will not be
              accessible. Putting this setting to True (deleting the
              results) is only sensible when the
              :py:attr:`~set_integrated_result` is set to True. In that
              case, the propagated states are *not* accessible directly
              from this objects, but the results are used to update the
              environment, *e.g.* update the ephemeris of the propagated
              body with the numerical results.

          - name: set_integrated_result # [py]
            type: Bool, default = False # [py]
            description: |  # [py]
              Boolean defining whether the propagation results are to
              be used to update the environment. If this variable is set
              to False, the numerical propagation results can be
              retrieved from this object (provided the
              :py:attr:`~clear_numerical_solutions` is set to False),
              but the (for instance) Ephemeris of the propagated body
              is not updated with the propagation results. If this
              variable is set to True, the properties of the propagated
              :class:`~tudatpy.numerical_simulation.environment.Body`
              object will be updated as per the numerical results.
              Depending on the state type, this will result in:
                 - **Translational**: The ephemeris of the propagated body
                   will be updated.

                   .. note:: This requires the propagated body to be
                             endowed with a tabulated ephemeris.

                 - **Rotational**: The rotational ephemeris of the
                   propagated body will be updated.

                   .. note:: This requires the propagated body to be
                             endowed with a tabulated rotational
                             ephemeris.

                 - **Mass**: The mass function of the propagated body
                   will be updated.

          - name: print_number_of_function_evaluations # [py]
            type: bool, default = False # [py]
            description: |    # [py]
              Boolean defining whether the number of function evaluations that
              were performed is to be printed to the console after propagation.

          - name: print_dependent_variable_data # [py]
            type: bool, default = True # [py]
            description: |    # [py]
              Boolean defining whether the meaning and indices of the
              entries of the dependent variable data are to be printed to
              the console.

              .. note:: The same information can be retrieved from the
                        :py:attr:`~dependent_variable_ids`
                        property.

      - name: integrateEquationsOfMotion                          # [cpp]
      - name: integrate_equations_of_motion                       # [py]
        short_summary: |
          This function numerically (re-)integrates the equations of
          motion.
        extended_summary: |
          This function numerically (re-)integrates the equations of
          motion, using the settings set through the constructor and a
          new initial state vector provided here.

        parameters:
        - name: initialStates # [cpp]
          type: Eigen::Matrix # [cpp]
        - name: initial_states # [py]
          type: numpy.ndarray # [py]
          description: |
            Initial state vector that is to be used for numerical
            integration. Note that this state should be in the correct
            frame (i.e. relative to central_bodies in
            propagator_settings), and in Cartesian elements (even when
            using a different propagation scheme than Cowell).

            .. note:: When using default settings for the class
                      constructor, this function is called during object
                      creation.

      #- name: manuallySetAndProcessRawNumericalEquationsOfMotionSolution # [cpp]
      #- name: manually_set_and_process_raw_numerical_equations_of_motion_solution # [py]
        #short_summary: "This function returns the history of cumulative computation time needed during the propagation as a vector of key-value containers."
        #extended_summary: |
          #This function returns the history of cumulative computation time needed during the propagation as a vector of key-value containers.
          #This means that at each time step the computation time is the sum of the computation time needed for that particular
          #time step and the computation time needed for all the previous time steps. The computation time is returned
          #as value, with time as key. This function is similar to the corresponding function without "base", with
          #different return types.

        #parameters:
          #- name: equationsOfMotionNumericalSolution # [cpp]
            #type: std::map<double, Eigen::Matrix> # [cpp]
          #- name: equations_of_motion_numerical_solution # [py]
            #type: Dict[float, numpy.ndarray] # [py]
            #description: State history generated externally.

          #- name: dependentVariableHistory # [cpp]
            #type: std::map<double, Eigen::Vector> # [cpp]
          #- name: dependent_variable_history # [py]
            #type: Dict[float, numpy.ndarray] # [py]
            #description: Dependent variable history generated externally.

          #- name: processSolution # [cpp]
            #type: bool # [cpp]
          #- name: process_solution # [py]
            #type: bool # [py]
            #description: If true, the new solution will be reprocessed immediately.

      #- name: resetInitialPropagationTime # [cpp]
      #- name: reset_initial_propagation_time # [py]
        #short_summary: "This function resets the initial time of the propagation."
        #extended_summary: |
          #This function resets the initial time of the propagation.

        #parameters:
        #- name: initialPropagationTime # [cpp]
          #type: double # [cpp]
        #- name: new_initial_propagation_time # [py]
          #type: float # [py]
          #description: |
            #New value for the initial time of the propagation.

      #- name: resetPropagationTerminationConditions # [cpp]
      #- name: reset_propagation_termination_conditions # [py]
        #short_summary: "This function resets the termination conditions of the propagation."
        #extended_summary: |
          #Function to reset the object that checks whether the simulation should be stopped based on the (newly)
          #defined propagation settings.

      #- name: processNumericalEquationsOfMotionSolution # [cpp]
      #- name: process_numerical_equations_of_motion_solution # [py]
        #short_summary: "This function updates the environment with the numerical solution of the propagation."
        #extended_summary: |
          #This function updates the environment with the numerical solution of the propagation. It sets
          #the propagated translational dynamics solution as the new input for the Ephemeris object of the body that was
          #propagated.

      #- name: suppressDependentVariableDataPrinting # [cpp]
      #- name: suppress_dependent_variable_terminal_printing # [py]
        #short_summary: "This function is used to deactivate the output to the terminal informing the user about the dependent variable saved."
        #extended_summary: |
          #This function is used to deactivate the output to the terminal informing the user about the dependent variable saved.

      #- name: enableDependentVariableDataPrinting # [cpp]
      #- name: enable_dependent_variable_terminal_printing # [py]
        #short_summary: "This function is used to activate the output to the terminal informing the user about the dependent variable saved."
        #extended_summary: |
          #This function is used to activate the output to the terminal informing the user about the dependent variable saved.



  #####  VARIATIONAL SIMULATOR #####

  - name: SingleArcVariationalSimulator # [py]
  - name: SingleArcVariationalEquationsSolver # [cpp]
    short_summary: "Class for consolidating single arc variational dynamics functionality."
    extended_summary: |
      Class for consolidating all functionality required to perform single arc variational dynamics simulations.
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
      special_members: __init__
    properties:

      - name: parametersToEstimate_ # [cpp]
        type: std::shared_ptr< estimatable_parameters::EstimatableParameterSet< > > # [cpp]
      - name: parameter_vector # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation.EstimatableParameterSet`  # [py]
        readonly: No
        description: |
          Consolidated set of (estimatable) parameters
          w.r.t. the variational dynamics in the Variational Simulator are defined.

      - name: variationalEquationsSolution_ # [cpp]
        type: std::vector< std::map< double, Eigen::MatrixXd > > # [cpp]
      - name: state_transition_matrix_history # [py]
        type: list[ dict[float, numpy.ndarray] ] # [py]
        readonly: Yes
        description: |
          List containing the solution of the variational equations, i.e. the
          state transition matrix history (first entry) and sensitivity matrix history (second vector entry).

      - name: state_transition_matrix_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          State transition matrix history, given as epoch with propagation epochs as keys.
          This is (alongside the `sensitivity_matrix_history`) the solution of the variational equations.

      - name: sensitivity_matrix_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Sensitivity matrix history, given as epoch with propagation epochs as keys.
          This is (alongside the `state_transition_matrix_history`) the solution of the variational equations.

      - name: state_history # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          State history, given as epoch with propagation epochs as keys.
          This is the solution of the (propagated) equations of motion, describing the states along which
          the variational dynamics are solved.


      - name: dynamicsSimulator_ # [cpp]
        type: std::shared_ptr< SingleArcDynamicsSimulator< > > # [cpp]
      - name: dynamics_simulator # [py]
        type: dict[float, numpy.ndarray] # [py]
        readonly: Yes
        description: |
          Simulator object containing all functionality for solving of the (regular) equations of motion.


    methods:
      - name: ctor
        short_summary: "Class constructor."
        extended_summary: |
          Constructor through which the user can create instances of this class.
          Defines environment, propagation and integrations models, as well as a number of settings related
          to the (estimatable) parameters, w.r.t. which the variational equations are defined.

          .. note:: When using default settings, creating an object of
                    this type automatically triggers the propagation

        parameters:
          - name: bodies
            type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies`
            description: |
              Object defining the physical environment, with all
              properties of artificial and natural bodies.

          - name: integrator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.integrator.IntegratorSettings`  # [py]
            description: |            # [py]
              Settings to create the numerical integrator that is to be used for the integration of the equations of motion.

          - name: propagator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.propagator.PropagatorSettings`  # [py]
            description: |            # [py]
              Settings to create the propagator that is to be used for the propagation of the dynamics.

          - name: estimated_parameters # [py]
            type: :class:`~tudatpy.numerical_simulation.estimation.EstimatableParameterSet` # [py]
            description: | # [py]
              Object defining a consolidated set of (estimatable) parameters (w.r.t. variational equations are defined),
              linked to the environment and acceleration settings of the simulation.

          - name: integrate_equations_concurrently # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether equations of motion and variational equations are to be propagated concurrently
              (if true) or sequentially (of false).

          - name: variational_only_integrator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.integrator.IntegratorSettings`, default = [] # [py]
            description: |             # [py]
              Settings to create the numerical integrator that is to be used for integration the variational equations.
              If none is given (default), the numerical integration settings are taken to be the same as the ones applied
              in the integration of the equations of motions (specified by the `integrator_settings` parameter).

          - name: clear_numerical_solutions # [py]
            type: Bool, default = False # [py]
            description: |             # [py]
              Boolean to determine whether to clear the raw numerical solution member variables
              and to reset the state transition interface after propagation.

          - name: integrate_on_creation # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether the propagation should be performed immediately (default), or at a later time
              (when calling the :func:`integrate_full_equations` or :func:`integrate_equations_of_motion_only` member function).

          - name: set_integrated_result # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean to determine whether to automatically use the integrated results to set ephemerides for the
              propagated bodies.


      - name: integrateDynamicalEquationsOfMotionOnly                     # [cpp]
      - name: integrate_equations_of_motion_only                          # [py]
        short_summary: |
          Function to trigger the integration of the (regular) equations of motion.

        extended_summary: |
          Function to trigger the integration only of the (regular) equations of motion, resulting in a `state_history`.
          This step does not yet use variational dynamics. In order to also solve the variational equations,
          use the :func:`integrate_full_equations` member function.

        returns:
          type: None # [py]
          description: Creates / modifies the `state_history` property of the VariationalSolver object. # [py]


      - name: integrateVariationalAndDynamicalEquations         # [cpp]
      - name: integrate_full_equations                          # [py]
        short_summary: |
          Function to trigger the integration of variational and dynamical equations (equations of motion).

        parameters:
          - name: initial_states
            type: numpy.ndarray([m, 1])
            description: |
              Initial state to be used for the parameters in the equations of motion.

          - name: integrate_equations_concurrently # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether equations of motion and variational equations are to be propagated concurrently
              (if true) or sequentially (of false).


        extended_summary: |
          Function to trigger the integration of the (regular) equations of motion as well as the variational equations,
          solving for `state_history` and `variational_equations_history`
          (in its two components `state_transition_matrix_history` & `sensitivity_matrix_history`).

        returns:
          type: None # [py]
          description: Creates / modifies the properties of the VariationalSolver object. # [py]


  #####       ESTIMATOR        #####

  - name: Estimator # [py]
  - name: OrbitDeterminationManager # [cpp]
    short_summary: "Class for consolidating all estimation functionality."
    extended_summary: |
       Class for consolidating all functionality required to perform an estimation.
    autoclass: # See https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html#directive-autoclass
        special_members: __init__
    properties:
      # - name: equationsOfMotionNumericalSolution_ # [cpp]
      #  type: std::map<double, Eigen::Matrix> # [cpp]
      - name: observation_simulators # [py]
        type: list[ :class:`~tudatpy.numerical_simulation.estimation.ObservationSimulator` ] # [py]
        readonly: Yes
        description: |
          Observation simulators contained in the Estimator object. A single observation simulator hosts
          the functionality for simulating a given observable over the defined link geometry.


      - name: observationManagers_ # [cpp]
        type: std::map< observation_models::ObservableType, std::shared_ptr< observation_models::ObservationManagerBase<  > > >  # [cpp]
      - name: observation_managers # [py]
        type: dict[ :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservableType`, :class:`~tudatpy.numerical_simulation.estimation.ObservationManager` ] # [py]
        readonly: Yes
        description: |
          Observation managers contained in the Estimator object. A single observation manager can simulate observations and
          calculate observation partials for all link ends involved in the given observable type.

      - name: stateTransitionAndSensitivityMatrixInterface_ # [cpp]
        type: std::shared_ptr< propagators::CombinedStateTransitionAndSensitivityMatrixInterface > # [cpp]
      - name: state_transition_interface # [py]
        type: :class:`~tudatpy.numerical_simulation.estimation.CombinedStateTransitionAndSensitivityMatrixInterface` # [py]
        readonly: Yes
        description: |
          State transition and sensitivity matrix interface, setting the variational equations/dynamics in the
          Estimator object.

      - name: variationalEquationsSolver_ # [cpp]
        type: std::shared_ptr< propagators::VariationalEquationsSolver< > > # [cpp]
      - name: variational_solver # [py]
        type: :class:`~tudatpy.numerical_simulation.VariationalEquationsSolver` # [py]
        readonly: Yes
        description: |
          Variational equations solver, which is used to manage and execute the numerical integration of
          equations of motion and variational equations/dynamics in the Estimator object.


    methods:
      - name: ctor
        short_summary: "Class constructor."
        extended_summary: |
          Constructor through which the user can create instances of this class.
          Defines environment, propagation and integrations models, as well as a number of settings related
          to the estimatable parameters and observation settings.

          .. note:: When using default settings, creating an object of
                    this type automatically triggers the propagation

        parameters:
          - name: bodies
            type: :class:`~tudatpy.numerical_simulation.environment.SystemOfBodies`
            description: |
              Object defining the physical environment, with all
              properties of artificial and natural bodies.

          - name: estimated_parameters # [py]
            type: :class:`~tudatpy.numerical_simulation.estimation.EstimatableParameterSet` # [py]
            description: | # [py]
              Object defining a consolidated set of estimatable parameters,
              linked to the environment and acceleration settings of the simulation.

          - name: observation_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.estimation_setup.observation.ObservationSettings`
            description: | # [py]
               List of settings objects, each object defining the observation model settings for one
               combination of observable and link geometry that is to be simulated.

          - name: integrator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.integrator.IntegratorSettings`  # [py]
            description: |            # [py]
              Settings to create the numerical integrator that is to be
              used for the integration of the equations of motion

          - name: propagator_settings # [py]
            type: :class:`~tudatpy.numerical_simulation.propagation_setup.propagator.PropagatorSettings`  # [py]
            description: |            # [py]
              Settings to create the propagator that is to be
              used for the propagation of dynamics

          - name: integrate_on_creation # [py]
            type: Bool, default = True # [py]
            description: |             # [py]
              Boolean defining whether the propagation should be
              performed immediately (default), or at a later time
              (when calling the :func:`perform_estimation` member function.


      - name: estimateParameters                          # [cpp]
      - name: perform_estimation                          # [py]
        short_summary: |
          Function to trigger the parameter estimation.

        extended_summary: |
          Function to trigger parameter estimation, including orbit determination, i.e. body initial states, from (simulated) observations
          and a priori constraints.
          All observable types and link ends per observable types that are included in the estimation input must have been
          provided to the constructor of the Estimator object by the `observation_settings` parameter.

        parameters:

        - name: PodInput # [cpp]
          type: simulation_setup::PodInput # [cpp]
        - name: estimation_input # [py]
          type: :class:`~tudatpy.numerical_simulation.estimation.PodInput` # [py]
          description: |
            Object consolidating all inputs required to conduct an estimation.
            This includes foremost the simulated observations, as well as a priori information about the estimatable parameters.

        - name: EstimationConvergenceChecker # [cpp]
          type: simulation_setup::EstimationConvergenceChecker # [cpp]
        - name: EstimationConvergenceChecker # [py]
          type: :class:`~tudatpy.numerical_simulation.estimation.EstimationConvergenceChecker` # [py]
          description: |
            Object defining the convergence criteria for the estimation.

        returns:
          type: simulation_setup::PodOutput # [cpp]
          type: :class:`~tudatpy.numerical_simulation.estimation.PodOutput` # [py]
          description:  Object containing all outputs from the estimation (Pod) process. # [py]
