#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Radiation Pressure Setup ( createBodyShapeModel.h )

extended_summary: |
  This module contains a set of factory functions for setting up the
  radiation pressure models of celestial bodies in an environment.


#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

enums:

#  #    py::enum_<tss::RadiationPressureType>
#  #        enum tudat::simulation_setup::RadiationPressureType
#
#  - name: RadiationPressureType
#    short_summary: "Enumeration of available radiation pressure types."
#    #extended_summary: |
#      #Enumeration of radiation pressure types supported by tudat.
#
#    members:
#      - name: cannonball_radiation_pressure_interface
#      - name: panelled_radiation_pressure_interface
#      - name: solar_sailing_radiation_pressure_interface

######


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

#  - name: RadiationPressureInterfaceSettings
#    short_summary: "Base class for providing settings for radiation pressure interface models."
#    extended_summary: |
#      Functional (base) class for settings of radiation pressure interface models that require no information in addition to their type.
#      Radiation pressure interface model settings requiring additional information must be defined using an object derived from this class.
#
#  # attributes: none exposed
#
#    methods:
#      - name: ctor # [cpp]
#        #      - name: __init__ # [py]
#        short_summary: "Constructor." # [cpp]
#        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for ephemerides should be instantiated through the factory functions of a derived class." # [cpp]
#
#
#  # derived classes:
#  #######################################################################
#
#  - name: CannonBallRadiationPressureInterfaceSettings
#    short_summary: "Class for defining model settings of a cannonball radiation pressure interface."
#    extended_summary: "`RadiationPressureInterfaceSettings` derived class for cannonball radiation pressure interface model settings."
#
#    methods:
#      - name: ctor # [cpp]
#        #      - name: __init__ # [py]
#        short_summary: "Constructor." # [cpp]
#        extended_summary: "Instances of the `CannonBallRadiationPressureInterfaceSettings` class should be created through the `cannonBallRadiationPressureSettings` factory function." # [cpp]


##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

#  - name: cannonball # [py]
#  - name: cannonBallRadiationPressureSettings # [cpp]
#    short_summary: "Factory function for creating cannonball radiation pressure interface model settings."
#    extended_summary: |
#      Factory function for settings object, defining a cannonball radiation pressure interface model,
#      In this model the effective force is co-linear with the vector from radiation source to the body experiencing the force.
#
#    parameters:
#      - name: source_body # [py]
#        type: str # [py]
#      - name: sourceBody # [cpp]
#        type: std::string # [cpp]
#        description: "Name of body emitting the radiation."
#
#      - name: reference_area # [py]
#        type: float # [py]
#      - name: area # [cpp]
#        type: double # [cpp]
#        description: "Surface area that undergoes radiation pressure."
#
#      - name: radiation_pressure_coefficient # [py]
#        type: float # [py]
#      - name: radiationPressureCoefficient # [cpp]
#        type: double # [cpp]
#        description: "Radiation pressure coefficient."
#
#      - name: occulting_bodies # [py]
#        type: list[str], default = [""] # [py]
#      - name: occultingBodies # [cpp]
#        type: std::vector< std::string > # [cpp]
#        description: "List of bodies causing (partial) occultation."
#
#    returns:
#        type: CannonBallRadiationPressureInterfaceSettings
#        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.RadiationPressureInterfaceSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.CannonBallRadiationPressureInterfaceSettings` class
#
#    examples: |
#      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.RadiationPressureInterfaceSettings` using a cannonball radiation pressure model.
#      The radiating body is the Sun, the body experiencing the radiation pressure force is the "Spacecraft" body; occultations due to the Earth are taken into account:
#      # [cpp] (%!) Note about multi-body occultation...
#
#      .. code-block:: python # [py]
#        # [py]
#        # define parameters of the cannonball model # [py]
#        reference_area_radiation = 4.0 # [py]
#        radiation_pressure_coefficient = 1.2 # [py]
#        # define parameter for occulting body # [py]
#        occulting_bodies = [ "Earth" ] # [py]
#        # create radiation pressure interface settings # [py]
#        radiation_pressure_settings = environment_setup.radiation_pressure.cannonball( # [py]
#            "Sun", # [py]
#            reference_area_radiation, # [py]
#            radiation_pressure_coefficient, # [py]
#            occulting_bodies ) # [py]
#        # add radiation pressure interface to "Spacecraft" body # [py]
#        environment_setup.add_radiation_pressure_interface( bodies, "Spacecraft", radiation_pressure_settings ) # [py]
#
#      .. code-block:: cpp # [cpp]
#         # [cpp]
#         // define parameters of the cannonball model  # [cpp]
#         std::string sourceBody = "Sun"; # [cpp]
#         double area = 20.0; # [cpp]
#         const double radiationPressureCoefficient = 1.2; # [cpp]
#         // define parameter for occulting body and add to list of occulting bodies # [cpp]
#         std::vector< std::string > occultingBodies; # [cpp]
#         occultingBodies.push_back( "Earth" ); # [cpp]
#         // create radiation pressure interface and add to "Spacecraft" body # [cpp]
#         bodySettings[ "Spacecraft" ]->radiationPressureSettings[ sourceBody ] = std::make_shared< CannonBallRadiationPressureInterfaceSettings >( # [cpp]
#         sourceBody, area, radiationPressureCoefficient, occultingBodies ); # [cpp]


  #######################################################################

#  - name: panelled # [py]
#  - name: panelledRadiationPressureInterfaceSettings # [cpp]
#    short_summary: "Factory function for creating panelled radiation pressure interface model settings."
#    extended_summary: |
#      Factory function for settings object, defining panelled radiation pressure interface model.
#      In this model the solar radiation pressure force is derived from a so-called boxes-and-wings model.
#
#    parameters:
#      - name: source_body # [py]
#        type: str # [py]
#      - name: sourceBody # [cpp]
#        type: std::string # [cpp]
#        description: "Name of body emitting the radiation."
#
#      - name: emissivities # [py]
#        type: list[float] # [py]
#        description: List containing the panels' emissivities. # [py]
#      - name: emissivities # [cpp]
#        type: std::vector< double > # [cpp]
#        description: Vector containing the panels' emissivities. # [cpp]
#
#      - name: areas # [py]
#        type: list[float] # [py]
#        description: List containing the panels' areas. # [py]
#      - name: areas # [cpp]
#        type: std::vector< double > # [cpp]
#        description: Vector containing the panels' areas. # [cpp]
#
#      - name: diffusion_coefficients # [py]
#        type: list[float] # [py]
#        description: List containing diffuse reflection coefficients of the panels. # [py]
#      - name: diffusionCoefficients # [cpp]
#        type: std::vector< double > # [cpp]
#        description: Vector containing diffuse reflection coefficients of the panels. # [cpp]
#
#      - name: surface_normals_in_body_fixed_frame # [py]
#        type: list[numpy.ndarray[numpy.float64[3, 1]]] # [py]
#        description: List containing the (constant) surface normals of the panels, expressed in the body-fixed frame. # [py]
#      - name: surfaceNormalsInBodyFixedFrame # [cpp]
#        type: std::vector< Eigen::Vector3d > # [cpp]
#        description: Vector containing the (constant) surface normals of the panels, expressed in the body-fixed frame. # [cpp]
#
#      - name: occulting_bodies # [py]
#        type: list[str], default = [""] # [py]
#      - name: occultingBodies # [cpp]
#        type: std::vector< std::string > # [cpp]
#        description: "List of bodies causing (partial) occultation."
#
#    returns:
#        type: PanelledRadiationPressureInterfaceSettings
#        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.RadiationPressureInterfaceSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.PanelledRadiationPressureInterfaceSettings` class
#
#    examples: |
#      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.radiation_pressure.RadiationPressureInterfaceSettings` using a panelled radiation pressure model.
#      The radiating body is the Sun, the body experiencing the radiation pressure force is the boxes-and-wings - modelled "Spacecraft" body; occultations due to the Earth are taken into account:
#
#      .. code-block:: python # [py]
#        # [py]
#        # define parameters of the panelled model # [py]
#        emissivities = [0.1, 0.0, 0.1, 0.1]                 # emissivity of each panel # [py]
#        areas = [4.0, 6.0, 2.3, 2,3]                        # area of each panel # [py]
#        diffusion_coefficients = [0.46, 0.06, 0.46, 0.46]   # diffusion coefficient of each panel # [py]
#        panel_surface_normals = [                           # normals of each panel surfaces in body-fixed reference frame # [py]
#            [0.0, 0.0, 1.0], # [py]
#            [0.0, 0.0, -1.0], # [py]
#            [1.0, 0.0, 0.0], # [py]
#            [-1.0, 0.0, 0.0] # [py]
#        ] # [py]
#        # define parameter for occulting body # [py]
#        occulting_bodies = [ "Earth" ] # [py]
#        # create radiation pressure interface settings # [py]
#        radiation_pressure_settings = environment_setup.radiation_pressure.panelled( # [py]
#            "Sun", # [py]
#            emissivities, # [py]
#            areas, # [py]
#            diffusion_coefficients, # [py]
#            panel_surface_normals, # [py]
#            occulting_bodies) # [py]
#        # add radiation pressure interface to "Spacecraft" body # [py]
#        environment_setup.add_radiation_pressure_interface( bodies, "Vehicle", radiation_pressure_settings ) # [py]
#
#      # [cpp] cpp code snippet unavailable (outdated on tudat-space)

  #######################################################################
  # missing (w.r.t) tudat-space:
  #     - Solar Sail Radiation Interface
#######################################################################


#######################################################################
####################### LUMINOSITY MODELS
#######################################################################

  - name: constant_luminosity # [py]
    short_summary: "Factory function for creating constant radiation source luminosity settings."
    extended_summary: |
      Factory function for creating constant radiation source luminosity settings, defining the total
      radiated power (in Watts) of a given source. With this function, the source luminosity is constant, 
      and is assumed to emit radiation isotropically

    parameters:
      - name: luminosity # [py]
        type: float # [py]
        description: "Constant source luminosity (in Watt)"

    returns:
        type: LuminosityModelSettings
        description: Object defining settings for source luminosity

  #######################################################################

  - name: irradiance_based_constant_luminosity # [py]
    short_summary: "Factory function for creating source luminosity settings based on the irradiance at a reference distance."
    extended_summary: |
      Factory function for creating source luminosity based on the irradiance at a reference distance. For instance,
      one can provide the solar irradiance at 1 AU, and this will be translated to the Sun's luminosity. With this function,
      the source luminosity is constant, and is assumed to emit radiation isotropically

    parameters:
      - name: constant_irradiance # [py]
        type: float # [py]
        description: "Irradiance at reference distance from center of source (in W/m^{2})"

      - name: reference_distance # [py]
        type: float # [py]
        description: "Distance from center of source at which the irradiance is defined"

    returns:
      type: LuminosityModelSettings
      description: Object defining settings for source luminosity

  #######################################################################\

  - name: time_variable_luminosity # [py]
    short_summary: "Factory function for creating time-variable radiation source luminosity settings."
    extended_summary: |
      Factory function for creating time-variable radiation source luminosity settings, defining the total
      radiated power (in Watts) of a given source as a function of time. With this function, the source 
      is assumed to emit radiation isotropically

    parameters:
      - name: luminosity_function # [py]
        type: Callable[[float], float] # py
        description: "Function returning source luminosity (in Watt) as a function of time"

    returns:
      type: LuminosityModelSettings
      description: Object defining settings for source luminosity

  #######################################################################

  - name: irradiance_based_time_variable_luminosity # [py]
    short_summary: "Factory function for creating time-variable source luminosity settings based on the irradiance at a reference distance."
    extended_summary: |
      Factory function for creating source time-variable luminosity based on the irradiance at a reference distance. For instance,
      one can provide the solar irradiance at 1 AU as a function of time, and this will be translated to the Sun's luminosity.
      With this function, the source is assumed to emit radiation isotropically

    parameters:
      - name: irradiance_function # [py]
        type: Callable[[float], float] # py
        description: "Function returning irradiance at reference distance from center of source (in W/m^{2}) as a function fo time"

      - name: reference_distance # [py]
        type: float # [py]
        description: "Distance from center of source at which the irradiance is defined"

    returns:
      type: LuminosityModelSettings
      description: Object defining settings for source luminosity

  #######################################################################


#######################################################################
####################### SURFACE PROPERTY DISTRIBUTION
#######################################################################

  - name: constant_surface_property_distribution # [py]
    short_summary: "Factory function for creating constant radiative surface property distribution settings."
    extended_summary: |
      Factory function for creating constant radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings.

    parameters:
      - name: constant_value # [py]
        type: float # [py]
        description: "Constant surface property value"

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

#######################################################################

  - name: spherical_harmonic_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a spherical harmonic model."
    extended_summary: |
      Factory function for creating radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings 
      according to a spherical harmonic model. The user provides unnormalized cosine and sine coefficients :math:`C_{lm}` and :math:`S_{lm}`,
      from which the surface property :math:`k` is computed from:
      
      .. math::
         k(\phi,\theta)=\sum_{l=0}^{l_{max}}\sum_{m=0}^{l}\bar{P}_{lm}(\sin\phi)\left(\bar{C}_{lm}\cos m\theta+\bar{S}_{lm}\sin m\theta\right)

      with the angles :math:`\phi` and :math:`\theta` the body-fixed latitude and longitude of the evaluation point

    parameters:
      - name: cosine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: "Cosine coefficients of surface distribution. Entry (i,j) denotes coefficient :math:`{C}_{ij}` at degree i and order j."

      - name: sine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: "Sine coefficients of surface distribution. Entry (i,j) denotes coefficient :math:`{C}_{ij}` at degree i and order j."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: predefined_spherical_harmonic_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a predefined spherical harmonic model."
    extended_summary: |
      As :func:`spherical_harmonic_surface_property_distribution`, but with a predefined spherical harmonic distribution.

    parameters:
      - name: predefined_model # [py]
        type: SphericalHarmonicsSurfacePropertyDistributionModel # [py]
        description: "Identifier for predefined spherical harmonic surface property model."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: knocke_type_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to 'Knocke-type' model"
    extended_summary: |
      Factory function for creating radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings 
      according to a model such as the one used by Knocke (1988). This model uses a degree two zonal spherical harmonic model, with 
      a sinusoidal variation in the degree one coefficient. The surface property :math:`k` is computed from:
      
      .. math::
         k(\phi,t)&=a_{0}+a_{1}P_{1}(\sin\phi)+a_{2}P_{2}(\sin\phi)
         a_{1}&=c_{0}+c_{1}\cos\left(\frac{2\pi(t-t_{0})}{T}\right)+c_{2}\sin\left(\frac{2\pi(t-t_{0})}{T}\right)+

      with the angle :math:`\phi` denotes the body-fixed latitude of the evaluation point, and :math:`t`, :math:`t_{0}` and :math:`T` define the current time, 
      reference time and period of the variation, respectively. The coefficients :math:`a_{0}, a_{2}, c_{0}, c_{1}, c_{2}` are provided by the user.

    parameters:
      - name: constant_contribution # [py]
        type: float # [py]
        description: "Value of :math:`a_{0}` in above formulation."

      - name: constant_degree_one_contribution # [py]
        type: float # [py]
        description: "Value of :math:`c_{0}` in above formulation."

      - name: cosine_periodic_degree_one_contribution # [py]
        type: float # [py]
        description: "Value of :math:`c_{1}` in above formulation."

      - name: sine_periodic_degree_one_contribution # [py]
        type: float # [py]
        description: "Value of :math:`c_{2}` in above formulation."

      - name: constant_degree_two_contribution # [py]
        type: float # [py]
        description: "Value of :math:`a_{2}` in above formulation."

      - name: reference_epoch # [py]
        type: float # [py]
        description: "Reference epoch :math:`t_{0}` of the periodic variation."

      - name: period # [py]
        type: float # [py]
        description: "Period :math:`T` of the periodic variation."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: predefined_knocke_type_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a predefined 'Knocke-type` model."
    extended_summary: |
      As :func:`spherical_harmonic_surface_property_distribution`, but with a predefined spherical harmonic distribution.

    parameters:
      - name: predefined_model # [py]
        type: KnockeTypeSurfacePropertyDistributionModel # [py]
        description: "Identifier for predefined Knocke-type surface property model."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: custom_surface_property_distribution # [py]
    short_summary: "Factory function for creating radiative surface property distribution settings according to a custom user-defined model."
    extended_summary: |
      Factory function for creating radiative surface property (e.g. albedo, emmisivitiy, etc.) distribution settings
      according to a custom user-defined model, as a function of latitude, longitude and time

    parameters:
      - name: custom_function # [py]
        type: Callable[[float, float, float], float] # py
        description: "Function providing surface property as a function of latitude, longitude and time (in that order)."

    returns:
      type: SurfacePropertyDistributionSettings
      description: Object defining settings for surface property distribution

  #######################################################################

  - name: constant_radiosity # [py]
    short_summary: "Factory function for creating settings for surface constant surface radiosity of an extended source"
    extended_summary: |
      Factory function for creating settings for surface surface radiosity of an extended source, using constant Lambertian radiosity :math:`J` (in W/m^{2}).
      For a surface panel normal of :math:`\hat{\mathbf{n}}` and a vector :math:`\mathbf{r}` from the surface element to the target, the resulting
      irradiance :math:`\Phi` (in W/m^{2}) at the target is (if :math:`theta>0`, or in other words if the panel is visible from the target):
      
      .. math::
         \Phi=J\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}
      
      with :math:`A` the panel area, :math:`\theta` is the angle between :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.      

    parameters:
      - name: radiosity # [py]
        type: float # py
        description: "Constant Lambertian radiosity from surface in W/m^{2}."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: constant_albedo_surface_radiosity # [py]
    short_summary: "Factory function for creating settings for surface constant albedo surface radiosity of an extended source"
    extended_summary: |
      Factory function for creating settings for surface surface radiosity of an extended source, with surface radiation the result
      of albedo using a Lambertian scattering law, and a constant albedo value over the surface.
      For a surface panel normal of :math:`\hat{\mathbf{n}}`, a vector :math:`\mathbf{r}` from the surface element to the target, and a
      vector :math:`\mathbf{r}_{s}` from the surface element to the original source (typically the Sun), 
      the resulting irradiance :math:`\Phi` (in W/m^{2}) at the target is (if the panel is visible from the target and the original source):
      
      .. math::
         \Phi=\cos\theta_{s}\Phi_{s}\frac{\alpha}{\pi}\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}
      
      with :math:`\theta_{s}` the angle between :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r_{s}}`, :math:`\Phi_{s}` the irradiance from the original source
      at the panel of the reflecting body, :math:`\alpha` is the albedo coefficient, :math:`A` the panel area, :math:`\theta` is the angle between :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.      

    parameters:
      - name: constant_albedo # [py]
        type: float # py
        description: "Constant value of the albedo coefficient :math:`\alpha`."

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity


  #######################################################################

  - name: variable_albedo_surface_radiosity # [py]
    short_summary: "Factory function for creating settings for surface variable albedo surface radiosity of an extended source"
    extended_summary: |
      As :func:`constant_albedo_surface_radiosity`, but with the surface albedo :math:`\alpha` defined by a surface distribution model

    parameters:
      - name: albedo_distribution_settings # [py]
        type: SurfacePropertyDistributionSettings # py
        description: "Model for the surface distribution of the albedo :math:`\alpha`."

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: thermal_emission_blackbody_constant_emissivity # [py]
    short_summary: "Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body with constant emmisivity"
    extended_summary: |
      Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body (e.g. IR radiation) with constant surface 
      emissivity,
      where the emitted power of the body is computed from the assumption that all heat absorbed from an original source is
      emitted isotropically by the body. For instance, for Earth with Sun as original source, this model is equivalent to
      assuming that a given fraction of all heat incident of the Sun on the Earth is absorbed and causes the full Earth surface to
      heat to a constant temperature, which then results in the body emitting infrared radiation from its surface.

      For a surface panel normal of :math:`\hat{\mathbf{n}}`, a vector :math:`\mathbf{r}` from the surface element to the target, 
      the resulting irradiance :math:`\Phi` (in W/m^{2}) at the target is (if the panel is visible from the target and the original source):
    
      .. math::
         \Phi=\frac{\epsilon\Phi_{s}}{4}\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}
      
      with :math:`\epsilon` the emissivity, :math:`\Phi_{s}` the irradiance from the original source,  :math:`A` the panel area, :math:`\theta` is the angle between 
      :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.      

    parameters:
      - name: constant_emissivity # [py]
        type: float # py
        description: "Constant emissivity of the surface :math:`\epsilon`."

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: thermal_emission_blackbody_variable_emissivity # [py]
    short_summary: "Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body with variable emmisivity"
    extended_summary: |
      As :func:`thermal_emission_blackbody_constant_emissivity`, but with the surface emmisivity :math:`\epsilon` defined by a surface distribution model

    parameters:
      - name: emissivity_distribution_model # [py]
        type: SurfacePropertyDistributionSettings # py
        description: "Model for the surface distribution of the emissivity :math:`\epsilon`."

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

  #######################################################################

  - name: thermal_emission_angle_based_radiosity # [py]
    short_summary: "Factory function for creating settings for surface radiosity of an extended source with surface temperature from Lemoine (2013)"
    extended_summary: |
      Factory function for creating settings for surface radiosity of an extended source from an isotropically heated body (e.g. IR radiation) 
      with surface temperature :math:`T` computed from the angle of the surface normal and the original source as follows:

      .. math::
         T=\max\left(T_{max}(\cos\phi_{s})^{1/4},T_{min} \right)

      with :math:`phi_{s}` the angle along a great cirlce arc from the panel to the subsolar (for the Sun as original source) point; for
      a circular body equivalent to the angle of the vector to the original source and the surface normal. The minimum and
      maximum temperatures are user parameters.

      For a surface panel normal of :math:`\hat{\mathbf{n}}`, a vector :math:`\mathbf{r}` from the surface element to the target,
      the resulting irradiance :math:`\Phi` (in W/m^{2}) at the target is (if the panel is visible from the target and the original source):
      
      .. math::
         \Phi=\epsilon kT^{4}\frac{A\cos\theta}{\pi ||\mathbf{r}||^{2}}
      
      with :math:`\epsilon` the emissivity, :math:`\k` the Stefan-Boltzmann constant, :math:`A` the panel area, :math:`\theta` is the angle between
      :math:`\hat{\mathbf{n}}` and :math:`\mathbf{r}`.

    parameters:
      - name: minimum_temperature # [py]
        type: float # py
        description: "Minimum surface temperature :math:`T_{min}`."

      - name: maximum_temperature # [py]
        type: float # py
        description: "Maximum surface temperature :math:`T_{min}`."

      - name: constant_emissivity # [py]
        type: float # py
        description: "Constant emissivity of the surface :math:`\epsilon`."

      - name: original_source_name # [py]
        type: str # py
        description: "Name of the original source from which the radiation is reflection to the target."

    returns:
      type: PanelRadiosityModelSettings
      description: Object defining settings for source panel radiosity

