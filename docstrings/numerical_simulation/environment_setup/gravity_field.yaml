#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
# Gravity Field Setup ( createGravityField.h )

extended_summary: |
  This module contains a set of factory functions for setting up the
  gravitational potential models of celestial bodies in an environment.

references: |
  .. [1] Balmino, G. (1994). Gravitational potential harmonics from the shape of an homogeneous body. Celestial
        Mechanics and Dynamical Astronomy, 60(3), 331-364.
  .. [2] Werner, R. A., and Scheeres, D. J. (1997). Exterior Gravitation of a Polyhedron Derived and Compared With
        Harmonic and Mascon Gravitation Representations of Asteroid 4769 Castalia. Celestial Mechanics and Dynamical
        Astronomy, 65, 313-344.

#########################################################################
#  ███████ ███   ██ ██    ██ ███    ███  ██████
#  ██      ████  ██ ██    ██ ████  ████ █
#  █████   ██ ██ ██ ██    ██ ██ ████ ██  █████
#  ██      ██  ████ ██    ██ ██  ██  ██       █
#  ███████ ██    ██  ██████  ██      ██ ██████
#########################################################################

enums:

  #    py::enum_<tss::GravityFieldType>
  #        enum tudat::simulation_setup::GravityFieldType

  - name: GravityFieldType
    short_summary: "Enumeration of gravity field types."
    extended_summary: |
      Enumeration of gravity field types supported by tudat.
    members:
      - name: central # [cpp]
      - name: central_spice # [cpp]
      - name: spherical_harmonic # [cpp]
      - name: polyhedron # [cpp]

      - name: central_gravity # [py]
      - name: central_spice_gravity # [py]
      - name: spherical_harmonic_gravity # [py]
      - name: polyhedron_gravity # [py]

  #    py::enum_<tss::SphericalHarmonicsModel>
  #        enum tudat::simulation_setup::SphericalHarmonicsModel

  - name: SphericalHarmonicsModel
    short_summary: "Enumeration of spherical harmonics models."
    extended_summary: |
      Enumeration of spherical harmonics models supported by tudat.
    members:
      - name: egm96
      - name: ggm02c
      - name: ggm02s
      - name: glgm3150
      - name: lpe200
      - name: jgmro120d
      - name: jgmess160a
      - name: shgj180u


#########################################################################
#   ██████ ██          ██      ██████  ██████ ███████  ██████
#  ██      ██         ████    █       █       ██      █
#  ██      ██        ██  ██    █████   █████  █████    █████
#  ██      ██       ████████        █       █ ██            █
#   ██████ ███████ ██      ██ ██████  ██████  ███████ ██████
#########################################################################

classes:
  # base class:
  #######################################################################

  - name: GravityFieldSettings
    short_summary: "Base class for providing settings for automatic gravity field model creation."
    extended_summary: |
      This class is a functional base class for settings of gravity field models that require no information in addition to their type.
      Gravity field model classes requiring additional information must be created using an object derived from this class.

    properties: # [py]
      - name: gravity_field_type # [py]
        type: GravityFieldType # [py]
        description: Type of gravity field model that is to be created. # [py]
        readonly: True # [py]

    methods:
      - name: __init__ # [py]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of this class are typically not generated by the user. Settings objects for gravity field models should be instantiated through the factory functions of a derived class." # [cpp]

      - name: getGravityFieldType # [cpp]
        short_summary: "Retrieve gravity field type." # [cpp]
        extended_summary: "Function to retrieve the type of gravity field that is to be created through the settings object." # [cpp]
        parameters: # [cpp]
        returns: # [cpp]
          - name: gravityFieldType # [cpp]
            type: GravityFieldType # [cpp]


  # derived classes:
  #######################################################################

  - name: CentralGravityFieldSettings
    short_summary: "`GravityFieldSettings` derived class defining settings of point mass gravity field."
    extended_summary: |
      Derived class of `GravityFieldSettings` for central gravity fields, which are defined by a single gravitational parameter.

    properties: # [py]
      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of central gravity field. # [py]

    methods: # [cpp]
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `CentralGravityFieldSettings` class should be created through the `centralGravitySettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `CentralGravityFieldSettings` class should be created through the `central` factory function." # [py]

      - name: getGravitationalParameter # [cpp]
        short_summary: "Retrieve gravitational parameter." # [cpp]
        extended_summary: "Function to retrieve gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of central gravity field. # [cpp]

      - name: resetGravitationalParameter # [cpp]
        short_summary: "Reset gravitational parameter." # [cpp]
        extended_summary: "Function to reset gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: gravitationalParameter # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of central gravity field that is to be defined by the settings object. # [cpp]

  #######################################################################

  - name: SphericalHarmonicsGravityFieldSettings
    short_summary: "`GravityFieldSettings` derived class defining settings of spherical harmonic gravity field representation."
    extended_summary: |
      Derived class of `GravityFieldSettings` for gravity fields, which are defined by a spherical harmonic gravity field representation.

    properties: # [py]
      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of gravity field. # [py]

      - name: reference_radius # [py]
        type: float # [py]
        description: Reference radius of spherical harmonic field expansion. # [py]
        readonly: True # [py]

      - name: normalized_cosine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [py]

      - name: normalized_sine_coefficients # [py]
        type: numpy.ndarray # [py]
        description: Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [py]

      - name: associated_reference_frame # [py]
        type: str # [py]
        description: Identifier for body-fixed reference frame with which the coefficients are associated. # [py]

      - name: create_time_dependent_field # [py]
        type: bool # [py]
        description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed initially). # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `SphericalHarmonicsGravityFieldSettings` class should be created through the `sphericalHarmonicsGravitySettings` factory function." # [cpp]
      #      - name: __init__ # [py]
      #        short_summary: "Constructor." # [py]
      #        extended_summary: "Instances of the `SphericalHarmonicsGravityFieldSettings` class should be created through the `spherical_harmonic` factory function." # [py]

      - name: getGravitationalParameter # [cpp]
        short_summary: "Retrieve gravitational parameter." # [cpp]
        extended_summary: "Function to retrieve gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of gravity field. # [cpp]

      - name: resetGravitationalParameter # [cpp]
        short_summary: "Reset gravitational parameter." # [cpp]
        extended_summary: "Function to reset gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: gravitationalParameter # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of gravity field that is to be created from the settings object. # [cpp]

      - name: getReferenceRadius # [cpp]
        short_summary: "Retrieve reference radius." # [cpp]
        extended_summary: "Function to retrieve the reference radius (of the spherical harmonics field expansion) from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: double # [cpp]
            description: Reference radius of spherical harmonic field expansion. # [cpp]

      - name: getCosineCoefficients # [cpp]
        short_summary: "Retrieve cosine coefficients." # [cpp]
        extended_summary: "Function to retrieve the (geodesy normalized) cosine spherical harmonic coefficients from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: resetCosineCoefficients # [cpp]
        short_summary: "Reset cosine coefficients." # [cpp]
        extended_summary: "Function to reset the (geodesy normalized) cosine spherical harmonic coefficients of the settings object." # [cpp]
        parameters: # [cpp]
          - name: cosineCoefficients # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Cosine spherical harmonic coefficients (geodesy normalized) of the gravity field that is to be created from the settings object. Entry (i,j) denotes coefficient at degree i and order j. # [cpp]


      - name: getSineCoefficients # [cpp]
        short_summary: "Retrieve sine coefficients." # [cpp]
        extended_summary: "Function to retrieve the (geodesy normalized) sine spherical harmonic coefficients from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: resetSineCoefficients # [cpp]
        short_summary: "Reset sine coefficients." # [cpp]
        extended_summary: "Function to reset the (geodesy normalized) sine spherical harmonic coefficients of the settings object." # [cpp]
        parameters: # [cpp]
          - name: sineCoefficients # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Sine spherical harmonic coefficients (geodesy normalized) of the gravity field that is to be created from the settings object. Entry (i,j) denotes coefficient at degree i and order j. # [cpp]

      - name: getAssociatedReferenceFrame # [cpp]
        short_summary: "Retrieve associated reference frame." # [cpp]
        extended_summary: "Function to retrieve the reference frame with which the spherical harmonics coefficients of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: std::string # [cpp]
            description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients of the settings object are associated. # [cpp]

      - name: resetAssociatedReferenceFrame # [cpp]
        short_summary: "Reset associated reference frame." # [cpp]
        extended_summary: "Function to reset the reference frame with which the spherical harmonics coefficients of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: associatedReferenceFrame # [cpp]
            type: std::string # [cpp]
            description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients of the settings object are associated. # [cpp]

      - name: getCreateTimeDependentField # [cpp]
        short_summary: "Check whether the field should be created as time-dependent." # [cpp]
        extended_summary: "Function to retrieve boolean that denotes whether the settings object sets the gravity field to be created as time-dependent." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
            type: bool # [cpp]
            description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed initially). # [cpp]

      - name: setCreateTimeDependentField # [cpp]
        short_summary: "Set whether field is created as time-dependent." # [cpp]
        extended_summary: "Function to set boolean that denotes whether the settings object sets the gravity field to be created as time-dependent." # [cpp]
        parameters: # [cpp]
          - name: CreateTimeDependentField # [cpp]
            type: bool # [cpp]
            description: Boolean that denotes whether the field should be created as time-dependent (even if no variations are imposed initially). # [cpp]

  #######################################################################

  - name: PolyhedronGravityFieldSettings
    short_summary: "`GravityFieldSettings` derived class defining settings of a polyhedron gravity field representation."
    extended_summary: |
      Derived class of `GravityFieldSettings` for gravity fields, which are defined by a polyhedron gravity field representation.

    properties: # [py]
      - name: gravitational_parameter # [py]
        type: float # [py]
        description: Gravitational parameter of gravity field. # [py]

      - name: density # [py]
        type: float # [py]
        description: Density of the polyhedron. # [py]

      - name: associated_reference_frame # [py]
        type: str # [py]
        description: Identifier for body-fixed reference frame with which the vertices coordinates are associated. # [py]

      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns). # [py]

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron. # [py]

    methods:
      - name: ctor # [cpp]
        short_summary: "Constructor." # [cpp]
        extended_summary: "Instances of the `PolyhedronGravityFieldSettings` class should be created through the `polyhedronGravitySettings` factory function." # [cpp]

      - name: getGravitationalParameter # [cpp]
        short_summary: "Retrieve gravitational parameter." # [cpp]
        extended_summary: "Function to retrieve gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: double # [cpp]
          description: Gravitational parameter of gravity field. # [cpp]

      - name: resetGravitationalParameter # [cpp]
        short_summary: "Reset gravitational parameter." # [cpp]
        extended_summary: "Function to reset gravitational parameter of the settings object." # [cpp]
        parameters: # [cpp]
          - name: gravitationalParameter # [cpp]
            type: double # [cpp]
            description: Gravitational parameter of gravity field that is to be created from the settings object. # [cpp]

      - name: getDensity # [cpp]
        short_summary: "Retrieve density." # [cpp]
        extended_summary: "Function to retrieve the polyhedron density of the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: double # [cpp]
          description: Density of the polyhedron. # [cpp]

      - name: resetDensity # [cpp]
        short_summary: "Reset density." # [cpp]
        extended_summary: "Function to reset the polyhedron density of the settings object." # [cpp]
        parameters: # [cpp]
          - name: density # [cpp]
            type: double # [cpp]
            description: Density of the polyhedron for which the gravity field is to be created from the settings object. # [cpp]

      - name: getAssociatedReferenceFrame # [cpp]
        short_summary: "Retrieve associated reference frame." # [cpp]
        extended_summary: "Function to retrieve the reference frame with which the polyhedron vertices of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: std::string # [cpp]
          description: Identifier for body-fixed reference frame with which the polyhedron vertices of the settings object are associated. # [cpp]

      - name: resetAssociatedReferenceFrame # [cpp]
        short_summary: "Reset associated reference frame." # [cpp]
        extended_summary: "Function to reset the reference frame with which the polyhedron vertices of the settings object are associated." # [cpp]
        parameters: # [cpp]
          - name: associatedReferenceFrame # [cpp]
            type: std::string # [cpp]
            description: Identifier for body-fixed reference frame with which the polyhedron vertices of the settings object are associated. # [cpp]

      - name: getVerticesCoordinates # [cpp]
        short_summary: "Retrieve vertices coordinates." # [cpp]
        extended_summary: "Function to retrieve the coordinates of the polyhedron vertices from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: Eigen::MatrixXd # [cpp]
          description: Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one row per vertex, 3 columns). # [cpp]

      - name: resetVerticesCoordinates # [cpp]
        short_summary: "Reset vertices coordinates." # [cpp]
        extended_summary: "Function to reset the coordinates of the polyhedron vertices of the settings object." # [cpp]
        parameters: # [cpp]
          - name: verticesCoordinates # [cpp]
            type: Eigen::MatrixXd # [cpp]
            description: Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one row per vertex, 3 columns). # [cpp]

      - name: getVerticesDefiningEachFacet # [cpp]
        short_summary: "Retrieve vertices defining each facet." # [cpp]
        extended_summary: "Function to retrieve the indices of the vertices defining each polyhedron facet from the settings object." # [cpp]
        parameters: # [cpp]
          - name: None # [cpp]
        returns: # [cpp]
          type: Eigen::MatrixXi # [cpp]
          description: Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of the facet (one row per facet, 3 columns).  # [cpp]

      - name: resetVerticesDefiningEachFacet # [cpp]
        short_summary: "Reset vertices defining each facet." # [cpp]
        extended_summary: "Function to reset the indices of the vertices defining each polyhedron facet of the settings object." # [cpp]
        parameters: # [cpp]
          - name: verticesDefiningEachFacet # [cpp]
            type: Eigen::MatrixXi # [cpp]
            description: | # [cpp]
              Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth # [cpp]
              vertex of the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered # [cpp]
              counterclockwise when seen from the outside of the polyhedron. # [cpp]

  #######################################################################

  # skip for now
  #  - name: FromFileSphericalHarmonicsGravityFieldSettings
  #    short_summary: "`SphericalHarmonicsGravityFieldSettings` derived class defining settings from a spherical harmonics model file."




##############################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██  ██████
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██ █
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██  █████
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██       █
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████ ██████
##############################################################################

functions:
  # factory functions:
  #######################################################################

  - name: central # [py]
  - name: centralGravitySettings # [cpp]
    short_summary: "Factory function for central gravity field settings object."
    extended_summary: |
      Factory function for settings object, defining a point-mass gravity field model with user-defined gravitational parameter :math:`\mu`. The gravitational potential is the defined as:

      .. math::
         U(\mathbf{r})=\frac{\mu}{||\mathbf{r}||}

      with :math:`\mathbf{r}` the position vector measured from the body's center of mass.

    parameters:
      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter defining the point-mass gravity field.
    returns:
        type: CentralGravityFieldSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.CentralGravityFieldSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` for Earth using a simple central gravity field model:

      .. code-block:: python # [py]
         # [py]
         # define parameters describing central gravity model # [py]
         gravitational_parameter = 3.986e14 # [py]
         # create gravity field settings # [py]
         body_settings.get( "Earth" ).gravity_field_settings = environment_setup.gravity_field.central( gravitational_parameter ) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters describing central gravity model # [cpp]
         double gravitationalParameter = 3.986e14 # [cpp]
         // create gravity field settings # [cpp]
         bodySettings[ "Earth" ]->gravityFieldSettings = std::make_shared< CentralGravityFieldSettings >( gravitationalParameter ); # [cpp]

  #######################################################################

  - name: central_spice # [py]
  - name: centralGravityFromSpiceSettings # [cpp]
    short_summary: "Factory function to create central gravity field settings from Spice settings."
    extended_summary: |
      Factory function for settings object, defining a point-mass gravity field model. This function provides the same model as :func:`~tudatpy.numerical_simulation.environment_setup.gravity_field.central`), but with gravitational parameter :math:`\mu` from Spice.
    parameters:
    returns:
        type: GravityFieldSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` class of gravity field type ``central_spice``"

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` for Earth using a simple central gravity field model and data from Spice:

      .. code-block:: python # [py]
         # [py]
         # create gravity field settings # [py]
         body_settings.get( "Earth" ).gravity_field_settings = environment_setup.gravity_field.central_spice( )

      .. code-block:: cpp # [cpp]
         # [cpp]
         // create gravity field settings # [cpp]
         bodySettings[ "Earth" ]->gravityFieldSettings = std::make_shared< GravityFieldSettings >( central_spice ); # [cpp]

  #######################################################################

  - name: spherical_harmonic # [py]
  - name: sphericalHarmonicsGravitySettings # [cpp]
    short_summary: "Factory function for creating a spherical harmonics gravity field settings object."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through spherical harmonic expansion.
      The ``associated_reference_frame`` must be the same frame ID as the target frame of the body’s rotation model.
      It represents the frame in which the spherical harmonic field is defined.
      
      The gravitational potential is the defined as:

      .. math::
         U(\mathbf{r})=\sum_{l=0}^{l_{max}}\sum_{m=0}^{l}\mu\left(\frac{{R}^{l}}{r^{l+1}}\right)\bar{P}_{lm}(\sin\phi)\left(\bar{C}_{lm}\cos m\theta+\bar{S}_{lm}\sin m\theta\right)

      with :math:`\mathbf{r}` the position vector of the evaluation point, measured from the body's center of mass. The angles :math:`\phi` and :math:`\theta` are the body-fixed latitude and longitude of the evaluation point, and :math:`\bar{P}_{lm}` is the associated Legendre polynomial (at degree/order :math`l/m`).

      Note: Spherical harmonic coefficients used for this environment model must *always* be fully normalized.
      To normalize un-normalized spherical harmonic coefficients, see :func:`~tudatpy.astro.gravitation.normalize_spherical_harmonic_coefficients`.

    parameters:
      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter :math:`\mu` of gravity field.

      - name: reference_radius # [py]
        type: float # [py]
      - name: referenceRadius # [cpp]
        type: double # [cpp]
        description: Reference radius :math:`R` of spherical harmonic field expansion.

      - name: normalized_cosine_coefficients # [py]
        type: numpy.ndarray # [py]
      - name: cosineCoefficients # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cosine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient :math:`\bar{C}_{ij}` at degree i and order j.
          As such, note that entry (0,0) of cosine coefficients should be equal to 1.

      - name: normalized_sine_coefficients # [py]
        type: numpy.ndarray # [py]
      - name: sineCoefficients # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Sine spherical harmonic coefficients (geodesy normalized). Entry (i,j) denotes coefficient :math:`\bar{S}_{ij}`
          at degree i and order j.

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

    returns:
        type: SphericalHarmonicsGravityFieldSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.SphericalHarmonicsGravityFieldSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` for Earth using a spherical harmonics gravity model:

      .. code-block:: python # [py]
        # [py]
        # Define the spherical harmonics gravity model # [py]
        gravitational_parameter = 3986004.415E+8 # [py]
        reference_radius = 6378136.3 # [py]
        # Normalized coefficients taken from https://cddis.nasa.gov/archive/egm96/general_info/egm96_to360.ascii # [py]
        # The above file is described in https://cddis.nasa.gov/archive/egm96/general_info/readme.egm96 # [py]
        normalized_cosine_coefficients = [ # [py]
            [1,                   0,                   0,                   0], # [py]
            [0,                   0,                   0,                   0], # [py]
            [-0.484165371736E-03, -0.186987635955E-09, 0.243914352398E-05,  0], # [py]
            [0.957254173792E-06,  0.202998882184E-05,  0.904627768605E-06,  0.721072657057E-06] # [py]
        ] # [py]
        normalized_sine_coefficients = [ # [py]
            [0,                   0,                   0,                   0], # [py]
            [0,                   0,                   0,                   0], # [py]
            [0,                   0.119528012031E-08,  -0.140016683654E-05, 0], # [py]
            [0,                   0.248513158716E-06,  -0.619025944205E-06, 0.141435626958E-05] # [py]
        ] # [py]
        associated_reference_frame = "IAU_Earth" # [py]
        # Create the gravity field settings and add them to the body "Earth" # [py]
        body_settings.get( "Earth" ).gravity_field_settings = environment_setup.gravity_field.spherical_harmonic( # [py]
            gravitational_parameter, # [py]
            reference_radius, # [py]
            normalized_cosine_coefficients, # [py]
            normalized_sine_coefficients, # [py]
            associated_reference_frame ) # [py]

      .. code-block:: cpp # [cpp]
         # [cpp]
         // define parameters describing spherical harmonics gravity model  # [cpp]
         double gravitationalParameter = 3.986e14 # [cpp]
         double referenceRadius = 6.371e6 # [cpp]
         Eigen::MatrixXd normalizedCosineCoefficients = ...  # [cpp]
         Eigen::MatrixXd normalizedSineCoefficients =  ...   # [cpp]
         std::string associatedReferenceFrame = ...     # [cpp]
         // create gravity field settings # [cpp]
         bodySettings[ "Earth" ]->gravityFieldSettings = std::make_shared< SphericalHarmonicsGravityFieldSettings >( # [cpp]
         gravitationalParameter, referenceRadius, normalizedCosineCoefficients, normalizedSineCoefficients, associatedReferenceFrame ); # [cpp]

  #######################################################################

  - name: sh_triaxial_ellipsoid_from_density # [py]
  - name: createHomogeneousTriAxialEllipsoidGravitySettings # [cpp]
    short_summary: "Factory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters, using the density to define the mass distribution."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid, same as :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.spherical_harmonic`
      The constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.
      Gravity fields from this setting object are expressed in normalized spherical harmonic coefficients.
      The constant mass distribution is defined by the density and gravitational constant (optional).
      The body-fixed x-, y- and z- axes are assumed to be along the A-, B- and C- axes.
      This function implements the models of (see Balmino [1]_).

    parameters:
      - name: axis_a # [py]
        type: float # [py]
      - name: axisA # [cpp]
        type: double # [cpp]
        description: Dimension of largest axis of triaxial ellipsoid.

      - name: axis_b # [py]
        type: float # [py]
      - name: axisB # [cpp]
        type: double # [cpp]
        description: Dimension of intermediate axis of triaxial ellipsoid.

      - name: axis_c # [py]
        type: float # [py]
      - name: axisC # [cpp]
        type: double # [cpp]
        description: Dimension of smallest axis of triaxial ellipsoid.

      - name: density # [py]
        type: float # [py]
      - name: ellipsoidDensity # [cpp]
        type: double # [cpp]
        description: Density of ellipsoid.

      - name: maximum_degree # [py]
        type: int # [py]
      - name: maximumDegree # [cpp]
        type: int # [cpp]
        description: Maximum degree of spherical harmonics expansion.

      - name: maximum_order # [py]
        type: int # [py]
      - name: maximumOrder # [cpp]
        type: int # [cpp]
        description: Maximum order of spherical harmonics expansion.

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

      - name: gravitational_constant # [py]
        type: float, default=physical_constants::GRAVITATIONAL_CONSTANT # [py]
      - name: gravitationalConstant # [cpp]
        type: double, default=physical_constants::GRAVITATIONAL_CONSTANT # [cpp]
        description: Gravitational constant G of the gravity field.

    returns:
        type: SphericalHarmonicsGravityFieldSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.SphericalHarmonicsGravityFieldSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` for Earth using the expansion of a homogeneous triaxial ellipsoid into a spherical harmonics gravity model:

      .. code-block:: python # [py]
        # [py]
        # Create the gravity field settings for Earth with Spherical Harmonics from a triaxial ellipsoid # [py]
        body_settings.get( "Earth" ).gravity_field_settings = environment_setup.gravity_field.spherical_harmonic_triaxial_ellipsoid_from_density( # [py]
            axis_a=6378171.88, # [py]
            axis_b=6378102.03, # [py]
            axis_c=6356752.24, # [py]
            density=5520, # [py]
            maximum_degree=50, # [py]
            maximum_order=50, # [py]
            associated_reference_frame="IAU_Earth" ) # [py]

      # cpp code snippet unavailable # [cpp]

  #######################################################################

  - name: sh_triaxial_ellipsoid_from_gravitational_parameter # [py]
  - name: createHomogeneousTriAxialEllipsoidGravitySettings # [cpp]
    short_summary: "Factory function for spherical harmonics gravity field settings object from triaxial ellipsoid parameters, using the gravitational parameter to define the mass distribution.."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through spherical harmonic expansion of a homogeneous triaxial ellipsoid, same as :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.spherical_harmonic`
      The constant mass distribution in the specified ellipsoid shape is expanded to obtain a spherical harmonic coefficient representation.
      Gravity fields from this setting object are expressed in normalized spherical harmonic coefficients.
      The constant mass distribution is defined by the gravitational parameter.
      The body-fixed x-, y- and z- axes are assumed to be along the A-, B- and C- axes.
      This function implements the models of (see Balmino [1]_).

    parameters:
      - name: axis_a # [py]
        type: float # [py]
      - name: axisA # [cpp]
        type: double # [cpp]
        description: Dimension of largest axis of triaxial ellipsoid.

      - name: axis_b # [py]
        type: float # [py]
      - name: axisB # [cpp]
        type: double # [cpp]
        description: Dimension of intermediate axis of triaxial ellipsoid.

      - name: axis_c # [py]
        type: float # [py]
      - name: axisC # [cpp]
        type: double # [cpp]
        description: Dimension of smallest axis of triaxial ellipsoid.

      - name: maximum_degree # [py]
        type: int # [py]
      - name: maximumDegree # [cpp]
        type: int # [cpp]
        description: Maximum degree of spherical harmonics expansion.

      - name: maximum_order # [py]
        type: int # [py]
      - name: maximumOrder # [cpp]
        type: int # [cpp]
        description: Maximum order of spherical harmonics expansion.

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: ellipsoidGravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter :math:`\mu` of gravity field.

    returns:
      type: SphericalHarmonicsGravityFieldSettings
      description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.SphericalHarmonicsGravityFieldSettings` class

  #######################################################################


  - name: from_file_spherical_harmonic # [py]
    short_summary: "Factory function for spherical harmonics gravity field settings of a predefined model."
    extended_summary: |
      Factory function for spherical harmonics gravity field settings of a predefined model

    parameters:
      - name: predefined_model # [py]
        type: PredefinedSphericalHarmonicsModel # [py]
        description: Identified for gravity field model that is to be loaded

      - name: maximum_degree # [py]
        type: int, default = -1 # [py]
        description: Maximum degree and order to which the coefficients are to be loaded. If value is negative, all coefficients for the specified gravity field are loaded


    returns:
        type: SphericalHarmonicsGravityFieldSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.SphericalHarmonicsGravityFieldSettings` class

    examples: |
      In this example, we create :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` for Earth using EGM96 spherical harmonics gravity model, up to degree and order 32:

      .. code-block:: python # [py]
        # [py]
        # Create the gravity field settings for Earth with Spherical Harmonics from a triaxial ellipsoid # [py]
        body_settings.get( "Earth" ).gravity_field_settings = environment_setup.gravity_field.spherical_harmonic_triaxial_body( # [py]
            environment_setup.gravity_field.egm96, # [py]
            32 ) # [py]

      # cpp code snippet unavailable # [cpp]

  #######################################################################

  - name: polyhedron_from_mu # [py]
  - name: polyhedronGravitySettingsFromMu # [cpp]
    short_summary: "Factory function for creating a polyhedron gravity field settings object, using the gravitational parameter."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through a polyhedron.
      The ``associated_reference_frame`` must be the same frame ID as the target frame of the body’s rotation model.
      It represents the frame in which the polyhedron field is defined. 

      The gravitational potential, acceleration, Laplacian of potential and Hessian of potential are computed according
      to Werner and Scheeres [2]_.

      This function uses the gravitational parameter to define the gravity field. To instead use the density 
      constant see :func:`~tudatpy.astro.gravitation.polyhedron_from_density`.

    parameters:
      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter :math:`\mu` of gravity field.

      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron.

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

      - name: gravitational_constant # [py]
        type: float, default=GRAVITATIONAL_CONSTANT # [py]
      - name: density # [cpp]
        type: double, default=GRAVITATIONAL_CONSTANT # [cpp]
        description: |
          Newton's gravitational constant G, used to computed the density

    returns:
        type: PolyhedronGravityFieldSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.PolyhedronGravityFieldSettings` class

  #######################################################################

  - name: polyhedron_from_density # [py]
  - name: polyhedronGravitySettings # [cpp]
    short_summary: "Factory function for creating a polyhedron gravity field settings object, using the density."
    extended_summary: |
      Factory function for settings object, defining a gravity field model through a polyhedron.
      The ``associated_reference_frame`` must be the same frame ID as the target frame of the body’s rotation model.
      It represents the frame in which the polyhedron field is defined.

      The gravitational potential, acceleration, Laplacian of potential and Hessian of potential are computed according
      to Werner and Scheeres [2]_.

      This function uses the density to define the gravity field. To instead use the
      gravitational parameter see :func:`~tudatpy.astro.gravitation.polyhedron_from_mu`.

    parameters:
      - name: density # [py]
        type: float, default=TUDAT_NAN # [py]
      - name: density # [cpp]
        type: double, default=TUDAT_NAN # [cpp]
        description: |
          Density of the polyhedron.

      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron. # [py]

      - name: associated_reference_frame # [py]
        type: str # [py]
      - name: associatedReferenceFrame # [cpp]
        type: std::string # [cpp]
        description: Identifier for body-fixed reference frame with which the spherical harmonics coefficients are associated.

      - name: gravitational_constant # [py]
        type: float, default=GRAVITATIONAL_CONSTANT # [py]
      - name: density # [cpp]
        type: double, default=GRAVITATIONAL_CONSTANT # [cpp]
        description: |
          Newton's gravitational constant G, used to computed the gravitational parameter

    returns:
        type: PolyhedronGravityFieldSettings
        description: Instance of the :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.GravityFieldSettings` derived :class:`~tudatpy.numerical_simulation.environment_setup.gravity_field.PolyhedronGravityFieldSettings` class


#######################################################################
