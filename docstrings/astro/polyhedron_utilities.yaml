#########################################################################
#    ███    ███  ██████  ██████  ██    ██ ██      ███████
#    ████  ████ ██    ██ ██   ██ ██    ██ ██      ██
#    ██ ████ ██ ██    ██ ██   ██ ██    ██ ██      █████
#    ██  ██  ██ ██    ██ ██   ██ ██    ██ ██      ██
#    ██      ██  ██████  ██████   ██████  ███████ ███████
#########################################################################
summary: |
  Polyhedron processing functions.

extended_summary: |
  This module provides a variety of functions to process the data from a polyhedron model, which can be used to either
  modify or retrieved information from the specified polyhedron mesh.

references: |
  .. [1] Dobrovolskis, A. (1996). "Inertia of Any Polyhedron", Icarus, 124 (243), 698-704.

#########################################################################
#  ███████ ██    ██ ███    ██  ██████ ████████ ██  ██████  ███    ██
#  ██      ██    ██ ████   ██ ██         ██    ██ ██    ██ ████   ██
#  █████   ██    ██ ██ ██  ██ ██         ██    ██ ██    ██ ██ ██  ██
#  ██      ██    ██ ██  ██ ██ ██         ██    ██ ██    ██ ██  ██ ██
#  ██       ██████  ██   ████  ██████    ██    ██  ██████  ██   ████
#########################################################################
functions:

  #########################################################################
  - name: surface_area # [py]
  - name: computePolyhedronSurfaceArea # [cpp]
    short_summary: "Computes the surface area of a polyhedron [1]_."

    parameters:
      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron.

    returns:
        type: float # [py]
        type: double # [cpp]
        description: Surface area.

  #########################################################################
  - name: volume # [py]
  - name: computePolyhedronVolume # [cpp]
    short_summary: "Computes the volume of a polyhedron [1]_."

    parameters:
      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron.

    returns:
        type: float # [py]
        type: double # [cpp]
        description: Volume.

  #########################################################################
  - name: centroid # [py]
  - name: computePolyhedronCentroidPosition # [cpp]
    short_summary: "Computes the position of the centroid of a polyhedron [1]_."

    parameters:
      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron.

    returns:
        type: numpy.ndarray # [py]
        type: Eigen::Vector3d # [cpp]
        description: Position of the centroid.

  #########################################################################
  - name: modify_centroid # [py]
  - name: modifyPolyhedronCentroidPosition # [cpp]
    short_summary: "Modifies the position of the centroid of the polyhedron."
    extended_summary: |
      Modifies the coordinates of the polyhedron vertices, such that the centroid of the modified polyhedron coincides
      with the specified position. The centroid is computed according to Dobrovolskis [1]_.

    parameters:
      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron.

      - name: desired_centroid # [py]
        type: numpy.ndarray # [py]
      - name: desiredCentroid # [cpp]
        type: Eigen::Vector3d # [cpp]
        description: |
          Desired position of the centroid.

    returns:
        type: numpy.ndarray # [py]
        type: Eigen::MatrixXd # [cpp]
        description: Vertices coordinates of the modified polyhedron, which has the specified centroid position.

  #########################################################################
  - name: inertia_tensor_from_density # [py]
  - name: computePolyhedronInertiaTensor # [cpp]
    short_summary: "Compute the inertia tensor of a polyhedron, from the density."
    extended_summary: |
      Computes the inertia tensor of a polyhedron, according to Dobrovolskis [1]_.

      The mass distribution is defined using the density of the polyhedron. To instead use the gravitational
      parameter see :func:`~tudatpy.astro.polyhedron_utilities.inertia_tensor_from_gravitational_parameter`.

    parameters:
      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron.

      - name: density # [py]
        type: float # [py]
      - name: density # [cpp]
        type: double # [cpp]
        description: |
          Density of the polyhedron

    returns:
        type: numpy.ndarray # [py]
        type: Eigen::Matrix3d # [cpp]
        description: Inertia tensor.

  #########################################################################
  - name: inertia_tensor_from_gravitational_parameter # [py]
  - name: computePolyhedronInertiaTensor # [cpp]
    short_summary: "Compute the inertia tensor of a polyhedron, from the gravitational parameter."
    extended_summary: |
      Computes the inertia tensor of a polyhedron, according to Dobrovolskis [1]_.

      The mass distribution is defined using the gravitational parameter of the polyhedron. To instead use the density
      see :func:`~tudatpy.astro.polyhedron_utilities.inertia_tensor_from_density`.

    parameters:
      - name: vertices_coordinates # [py]
        type: numpy.ndarray # [py]
      - name: verticesCoordinates # [cpp]
        type: Eigen::MatrixXd # [cpp]
        description: |
          Cartesian coordinates of each polyhedron vertex. Entry (i,j) denotes vertex i, coordinate j (one
          row per vertex, 3 columns).

      - name: vertices_defining_each_facet # [py]
        type: numpy.ndarray # [py]
      - name: verticesDefiningEachFacet # [cpp]
        type: Eigen::MatrixXi # [cpp]
        description: |
          Index (0 based) of the vertices constituting each facet. Entry (i,j) denotes facet i, and the jth vertex of
          the facet (one row per facet, 3 columns). In each row, the vertices' indices should be ordered counterclockwise
          when seen from the outside of the polyhedron.

      - name: gravitational_parameter # [py]
        type: float # [py]
      - name: gravitationalParameter # [cpp]
        type: double # [cpp]
        description: Gravitational parameter :math:`\mu` of gravity field.

    returns:
        type: numpy.ndarray # [py]
        type: Eigen::Matrix3d # [cpp]
        description: Inertia tensor.
